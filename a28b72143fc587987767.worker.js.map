{"version":3,"sources":["../webpack/bootstrap","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../../src/lib.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","frag/Interp.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/wavefile/lib/parsers/base64-arraybuffer.js","../node_modules/wavefile/lib/codecs/bitdepth.js","../node_modules/wavefile/lib/codecs/imaadpcm.js","../node_modules/wavefile/lib/codecs/alaw.js","../node_modules/wavefile/lib/codecs/mulaw.js","../node_modules/wavefile/lib/parsers/binary/lib/endianness.js","../node_modules/wavefile/lib/parsers/binary/lib/utf8-parser.js","../node_modules/wavefile/lib/parsers/binary/lib/int-parser.js","../node_modules/wavefile/lib/parsers/binary/lib/float-parser.js","../node_modules/wavefile/lib/parsers/binary/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/wavefile/lib/parsers/write-string.js","../node_modules/wavefile/lib/parsers/interleave.js","../node_modules/wavefile/lib/validators/validate-sample-rate.js","../node_modules/wavefile/lib/wavefile-cue-editor.js","../node_modules/wavefile/lib/wavefile-tag-editor.js","../node_modules/wavefile/lib/wavefile-creator.js","../node_modules/wavefile/lib/validators/validate-num-channels.js","../node_modules/wavefile/lib/wavefile-parser.js","../node_modules/wavefile/lib/wavefile-reader.js","../node_modules/wavefile/lib/riff-file.js","../node_modules/wavefile/lib/resampler/interpolator.js","../node_modules/wavefile/lib/resampler/fir-lpf.js","../node_modules/wavefile/lib/resampler/index.js","../node_modules/wavefile/lib/resampler/butterworth-lpf.js","../node_modules/wavefile/lib/wavefile-converter.js","../node_modules/wavefile/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../src/comlink.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","frag/Compute.js","../node_modules/pako/dist/pako.esm.mjs","../node_modules/jsfft/dist/fft.js","../node_modules/jsfft/dist/complex_array.js","../node_modules/lodash.clonedeep/index.js","../node_modules/webpack/buildin/global.js","../node_modules/webpack/buildin/module.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","configurable","writable","_createClass","protoProps","staticProps","_defineProperty","obj","_setPrototypeOf","setPrototypeOf","__proto__","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","e","encoder","TextEncoder","bytesToBase64","encode","decoder","TextDecoder","decode","base64ToBytes","base64abc","base64codes","getBase64Code","charCode","Error","code","result","bytes","str","index","missingOctets","Uint8Array","j","buffer","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","flatstep","a","b","x","Math","max","min","clamp","mix","Interp","arr","wrap","this","i2","round","phase","k","floor","getWrap","smoothstep","getTangent","t2","t3","_inherits","subClass","superClass","constructor","_getPrototypeOf","getPrototypeOf","_typeof","iterator","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Super","NewTarget","chars","changeBitDepth","samples","bithDepth","newSamples","targetBitDepth","indexOf","set","validateBitDepth_","toFunction","original","func","includes","floatToInt_","intToFloat_","intToInt_","getBitDepthFunction_","options","oldMin","pow","parseInt","newMin","oldMax","newMax","sign8Bit_","len","sample","args","bitDepth","sign","factor","INDEX_TABLE","STEP_TABLE","adpcmSamples","blockAlign","state","predicted","step","Int16Array","block","fileIndex","decoded","decodeBlock","encodeBlock","encodeSample_","blockHead_","sample2","num","original_sample","second_sample","first_sample","decodeSample_","delta","diff","updateEncoder_","nibble","difference","updateDecoder_","LOG_TABLE","encodeSample","compandedValue","exponent","decodeSample","aLawSample","position","pcmSamples","encodeTable","decodeTable","muLawSample","endianness","offset","start","end","swap_","theByte","unpack","lowerBoundary","upperBoundary","replace","String","fromCharCode","count","pack","codePoint","codePointAt","IntParser","bits","signed","ceil","unpack_","unpackSigned_","clamp_","sign_","FloatParser","ebits","fbits","bias","biasP2","ebitsFbits","fbias","abs","Infinity","exp","log","LN2","fraction","roundToEven","packFloatBits_","significand","eMax","leftBits","substring","charAt","NaN","join","w","f","unpackString","unpackUTF8","packString","packUTF8","packStringTo","packArrayTo","values","theType","packer","getParser_","fp","valuesLen","be","unpackArrayTo","output","parser","getUnpackLen_","readBuffer","copyBuffer_","packTo","receiver","base","desc","writeString","byteLength","packedString","deInterleave","numChannels","OutputObject","Float64Array","finalSamples","validateSampleRate","channels","sampleRate","WaveFileCueEditor","points","getCuePoints_","dwSampleOffset","fmt","dwSampleLength","pointData","cue","chunkId","label","existingPoints","clearLISTadtl_","setCuePoint_","setCuePointInOrder_","dwCuePoints","pointIndex","cIndex","getLISTIndex","LIST","subChunks","dwName","chunk","getDataForCuePoint_","dwPosition","fccChunk","dwChunkStart","dwBlockStart","pointDwName","LISTindex","getCueDataFromLIST_","dwPurposeID","dwCountry","dwLanguage","dwDialect","dwCodePage","setLabl_","hasSet","format","splice","adtlIndex","chunkSize","setLabelText_","setLtxtChunk_","tag","getTagIndex_","TAG","fixRIFFTag_","tags","listType","subLen","dataType","WAV_AUDIO_FORMATS","bitDepthCode","clearHeaders","newWavFile_","wavBuffer","bitDepthFromFmt_","updateDataType_","validateWavHeader_","interleaved","data","slice","iXML","iXMLValue","_PMX","_PMXValue","container","Number","interleave","numBytes","makeWavHeader_","samplesLength","createADPCMHeader_","createALawMulawHeader_","createExtensibleHeader_","createPCMHeader_","audioFormat","byteRate","bitsPerSample","cbSize","validBitsPerSample","dwChannelMask","subformat","fact","mask","dwChannelMask_","uInt16","uInt32","fileBody","getJunkBytes_","getDs64Bytes_","getBextBytes_","getiXMLBytes_","getFmtBytes_","getFactBytes_","getCueBytes_","getSmplBytes_","getLISTBytes_","get_PMXBytes_","fileBodyLength","file","enforceBext_","bext","codingHistory","concat","description","originator","originatorReference","originationDate","originationTime","timeReference","version","UMID","loudnessValue","loudnessRange","maxTruePeakLevel","maxMomentaryLoudness","maxShortTermLoudness","reserved","enforceByteLen_","prop","iXMLPackedValue","ds64","riffSizeHigh","riffSizeLow","dataSizeHigh","dataSizeLow","sampleCountHigh","sampleCountLow","cuePointsBytes","getCuePointsBytes_","smpl","smplLoopsBytes","getSmplLoopsBytes_","dwManufacturer","dwProduct","dwSamplePeriod","dwMIDIUnityNote","dwMIDIPitchFraction","dwSMPTEFormat","dwSMPTEOffset","dwNumSampleLoops","dwSamplerData","loops","dwType","dwStart","dwEnd","dwFraction","dwPlayCount","getFmtExtensionBytes_","extension","subChunksBytes","getLISTSubChunksBytes_","getLISTINFOSubChunksBytes_","getLISTadtlSubChunksBytes_","subChunk","LISTsubChunkValue","getLtxtChunkBytes_","ltxt","_PMXPackedValue","junk","chunkData","supported_containers","setSignature","readDs64Chunk_","readFmtChunk_","readFactChunk_","readBextChunk_","readiXMLChunk_","readCueChunk_","readSmplChunk_","readDataChunk_","readJunkChunk_","readLISTChunk_","read_PMXChunk_","tmpWav","WaveFileReader","assign","findChunk","head","readUInt16_","readUInt32","readFmtExtension_","readString","listChunks","readLISTSubChunks_","readLISTadtlSubChunks_","readLISTINFOSubChunks_","item","readZSTR_","signature","getSubChunksIndex_","multiple","chunks","maxSize","getSubChunkIndex_","getChunkId_","getChunkSize_","realChunkSize","Interpolator","scaleFrom","scaleTo","details","length_","scaleFactor_","interpolate","sinc","method","point","linear","cubic","tangentFactor_","tension","sincFilterSize_","sincFilterSize","kernel_","window","sin","PI","sinc_","sincKernel_","sincWindow","window_","getClippedInput_","getTangent_","ref","ref1","sum","FIRLPF","order","cutOff","omega","dc","filters","cos","z","initZ_","buf","pointer","out","DEFAULT_LPF_USE","DEFAULT_LPF_ORDER","DEFAULT_LPF","getCoeffs_","Fs","Fc","Q","stages","b0","b1","b2","a1","a2","runStage_","params","coeffs","preCalc_","cw","a0","pre","alpha","temp","resample","oldSampleRate","rate","interpolator","undefined","clip","LPF","LPFType","LPForder","upsample_","downsample_","resample_","reset","outputSize_","byteLen","byteOffset","outputSize","WaveFile","wav","fromBuffer","base64String","base64","lookup","charCodeAt","bufferLength","encoded1","encoded2","encoded3","encoded4","toBuffer","toBase64","dataURI","fromBase64","fromExisting_","assure16Bit_","blockCount","imaadpcm","correctContainer_","toBitDepth","aLawSamples","alaw","muLawSamples","mulaw","newBitDepth","changeResolution","thisBitDepth","assureUncompressed_","getSamples","validateResample_","fromALaw","fromMuLaw","fromIMAADPCM","_arrayLikeToArray","arr2","Array","_unsupportedIterableToArray","minLen","from","test","_slicedToArray","isArray","_arr","_n","_d","_e","_s","_i","next","done","err","Parent","Class","Function","_toConsumableArray","iter","proxyMarker","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","MessageChannel","port1","port2","expose","deserialize","port","createProxy","isError","message","stack","serialized","ep","addEventListener","callback","ev","returnValue","path","id","type","argumentList","map","fromWireValue","parent","reduce","rawValue","transfer","Promise","resolve","catch","then","toWireValue","wireValue","transferables","postMessage","removeEventListener","closeEndPoint","endpoint","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","proxy","_target","requestResponseMessage","_thisArg","rawArgumentList","last","processArguments","processed","v","transferCache","WeakMap","transfers","allowArrayLike","it","F","normalCompletion","didErr","_e2","handler","msg","fill","random","MAX_SAFE_INTEGER","pako","fft","cloneDeep","objToCompressedB64","objJsonStr","JSON","stringify","deflate","compressedB64ToObj","b64","parse","inflate","to","hashCode","split","widgetsVal","widgets","paramsVal","interp","nearest","completeNewWidgets","userCodeWidgets","oldWidgets","usage","DURATION","newWidgets","unit","placeholder","widgetKey","current","old","isSlider","isGrid","width","isCurve","_current$unit","_current$placeholder","sqrt","clean","isEdited","console","_clean","height","row","col","compileJsSoundCode","_ref","paramsArgs","code2","eval","valid","error","testSetting","_ref2","compiled","computeSetting","setting","N","res","performance","now","loudness","blockSize","blocks","_loop","ComplexArray","valueIndex","real","FFT","magnitude","exportWav","bufferInt","fromScratch","__webpack_exports__","zero","LITERALS","L_CODES","D_CODES","MAX_BITS","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","_dist_code","_length_code","MAX_MATCH","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","pending_buf","pending","send_bits","bi_valid","bi_buf","send_code","tree","bi_reverse","gen_codes","bl_count","next_code","init_block","dyn_ltree","dyn_dtree","bl_tree","END_BLOCK","opt_len","static_len","last_lit","matches","bi_windup","smaller","depth","_n2","_m2","pqdownheap","heap","heap_len","compress_block","ltree","dtree","lc","extra","lx","d_buf","l_buf","build_tree","node","stree","heap_max","h","xbits","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","_tr_stored_block","stored_len","header","subarray","copy_block","trees","_tr_init","LENGTH_CODES","tr_static_init","l_desc","d_desc","bl_desc","_tr_flush_block","opt_lenb","static_lenb","max_blindex","level","strm","data_type","black_mask","detect_data_type","BL_CODES","build_bl_tree","strategy","lcodes","dcodes","blcodes","rank","send_all_trees","_tr_tally","lit_bufsize","_tr_align","STATIC_TREES","bi_flush","adler32_1","adler","pos","s1","s2","crcTable","Uint32Array","table","makeTable","crc32_1","crc","messages","2","1","0","constants","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","_tr_init$1","_tr_stored_block$1","_tr_flush_block$1","_tr_tally$1","_tr_align$1","Z_FIXED$1","Z_UNKNOWN$1","MAX_MATCH$1","MIN_LOOKAHEAD","HCRC_STATE","BUSY_STATE","FINISH_STATE","errorCode","zero$1","HASH","prev","hash_shift","hash_mask","flush_pending","avail_out","pending_out","next_out","total_out","flush_block_only","block_start","strstart","put_byte","putShortMSB","read_buf","size","avail_in","input","next_in","total_in","longest_match","cur_match","match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","_w_size","window_size","hash_size","insert","ins_h","deflate_fast","flush","hash_head","bflush","match_length","max_lazy_match","MIN_MATCH$1","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","configuration_table","max_block_size","pending_buf_size","max_start","DeflateState","status","gzhead","gzindex","last_flush","w_bits","hash_bits","Uint16Array","HEAP_SIZE$1","MAX_BITS$1","deflateResetKeep","deflateReset","ret","deflateInit2","windowBits","memLevel","deflate_1","deflateInit","deflateSetHeader","beg","old_flush","text","hcrc","comment","time","os","bstate","deflate_huff","deflate_rle","deflateEnd","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","deflateInfo","_has","common","sources","shift","STR_APPLY_UIA_OK","__","_utf8len","q","strings","c2","m_pos","str_len","buf_len","utf16buf","c_len","buf2binstring","zstream","Z_NO_FLUSH$1","Z_FULL_FLUSH$1","Z_FINISH$1","Z_OK$1","Z_STREAM_END$1","Z_DEFAULT_COMPRESSION$1","Z_DEFAULT_STRATEGY$1","Z_DEFLATED$1","Deflate","opt","raw","gzip","ended","dict","_dict_set","deflate$1","deflator","flush_mode","_flush_mode","onData","onEnd","deflate_1$1","deflateRaw","inffast","_in","_out","dmax","wsize","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from_source","lencode","distcode","lenbits","distbits","top","dolen","dodist","sane","MAXBITS","lbase","lext","dbase","dext","inftrees","lens","lens_index","codes","table_index","work","opts","incr","low","here_bits","here_op","here_val","root","curr","drop","left","used","huff","base_index","offs","extra_index","Z_FINISH$2","Z_BLOCK$1","Z_OK$2","Z_STREAM_END$2","Z_STREAM_ERROR$1","Z_DATA_ERROR$1","Z_BUF_ERROR$1","Z_DEFLATED$2","TYPE$1","BAD$1","zswap32","InflateState","havedict","flags","check","total","wbits","ncode","nlen","ndist","have","lendyn","distdyn","back","was","lenfix","distfix","inflateResetKeep","Int32Array","inflateReset","inflateReset2","inflateInit2","virgin","fixedtables","updatewindow","src","copy","inflate_1","inflateInit","put","last_bits","last_op","last_val","hbuf","inf_leave","xflags","extra_len","inflateEnd","inflateGetHeader","inflateSetDictionary","inflateInfo","gzheader","toString$1","Z_NO_FLUSH$2","Z_FINISH$3","Z_OK$3","Z_STREAM_END$3","Z_NEED_DICT$1","Z_STREAM_ERROR$2","Z_DATA_ERROR$2","Z_MEM_ERROR$1","Inflate","inflate$1","inflator","last_avail_out","next_out_utf8","tail","utf8str","inflate_1$1","inflateRaw","ungzip","Deflate_1$1","deflate_1$2","deflateRaw_1$1","gzip_1$1","Inflate_1$1","inflate_1$2","inflateRaw_1$1","ungzip_1","constants_1","ensureComplexArray","InvFFT","frequencyMap","filterer","_complex_array","require","_complex_array2","default","SQRT1_2","_baseComplexArray","inverse","ArrayType","sqrt_n","LowestOddFactor","normalisation","recursive_result","imag","del_f_r","del_f_i","f_r","f_i","_real","_imag","_i2","FFT_Recursive","array","flips","Set","r_i","BitReverseIndex","has","_ref3","_ref4","add","BitReverseComplexArray","output_r","output_i","l_index","r_index","left_r","left_i","right_r","right_i","FFT_2_Iterative","bitreversed_index","other","arrayType","Float32Array","components","toFixed","seal","mapper","_this","mags","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","global","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","transform","arg","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","uid","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","isKeyable","getValue","pop","cache","pairs","LARGE_ARRAY_SIZE","ArrayBuffer","ctorString","isLength","baseKeys","g","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"a28b72143fc587987767.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/natify/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","/*\nMIT License\n\nCopyright (c) 2020 Egor Nepomnyaschih\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n/*\n// This constant can also be computed with the following algorithm:\nconst base64abc = [],\n\tA = \"A\".charCodeAt(0),\n\ta = \"a\".charCodeAt(0),\n\tn = \"0\".charCodeAt(0);\nfor (let i = 0; i < 26; ++i) {\n\tbase64abc.push(String.fromCharCode(A + i));\n}\nfor (let i = 0; i < 26; ++i) {\n\tbase64abc.push(String.fromCharCode(a + i));\n}\nfor (let i = 0; i < 10; ++i) {\n\tbase64abc.push(String.fromCharCode(n + i));\n}\nbase64abc.push(\"+\");\nbase64abc.push(\"/\");\n*/\nconst base64abc = [\n\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n\t\"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n\t\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n\t\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n\t\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"+\", \"/\"\n];\n\n/*\n// This constant can also be computed with the following algorithm:\nconst l = 256, base64codes = new Uint8Array(l);\nfor (let i = 0; i < l; ++i) {\n\tbase64codes[i] = 255; // invalid character\n}\nbase64abc.forEach((char, index) => {\n\tbase64codes[char.charCodeAt(0)] = index;\n});\nbase64codes[\"=\".charCodeAt(0)] = 0; // ignored anyway, so we just need to prevent an error\n*/\nconst base64codes = [\n\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63,\n\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255,\n\t255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n\t15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255,\n\t255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n\t41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n];\n\nfunction getBase64Code(charCode: number) {\n\tif (charCode >= base64codes.length) {\n\t\tthrow new Error(\"Unable to parse base64 string.\");\n\t}\n\tconst code = base64codes[charCode];\n\tif (code === 255) {\n\t\tthrow new Error(\"Unable to parse base64 string.\");\n\t}\n\treturn code;\n}\n\nexport function bytesToBase64(bytes: number[] | Uint8Array) {\n\tlet result = '', i, l = bytes.length;\n\tfor (i = 2; i < l; i += 3) {\n\t\tresult += base64abc[bytes[i - 2] >> 2];\n\t\tresult += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n\t\tresult += base64abc[((bytes[i - 1] & 0x0F) << 2) | (bytes[i] >> 6)];\n\t\tresult += base64abc[bytes[i] & 0x3F];\n\t}\n\tif (i === l + 1) { // 1 octet yet to write\n\t\tresult += base64abc[bytes[i - 2] >> 2];\n\t\tresult += base64abc[(bytes[i - 2] & 0x03) << 4];\n\t\tresult += \"==\";\n\t}\n\tif (i === l) { // 2 octets yet to write\n\t\tresult += base64abc[bytes[i - 2] >> 2];\n\t\tresult += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n\t\tresult += base64abc[(bytes[i - 1] & 0x0F) << 2];\n\t\tresult += \"=\";\n\t}\n\treturn result;\n}\n\nexport function base64ToBytes(str: string) {\n\tif (str.length % 4 !== 0) {\n\t\tthrow new Error(\"Unable to parse base64 string.\");\n\t}\n\tconst index = str.indexOf(\"=\");\n\tif (index !== -1 && index < str.length - 2) {\n\t\tthrow new Error(\"Unable to parse base64 string.\");\n\t}\n\tlet missingOctets = str.endsWith(\"==\") ? 2 : str.endsWith(\"=\") ? 1 : 0,\n\t\tn = str.length,\n\t\tresult = new Uint8Array(3 * (n / 4)),\n\t\tbuffer: number;\n\tfor (let i = 0, j = 0; i < n; i += 4, j += 3) {\n\t\tbuffer =\n\t\t\tgetBase64Code(str.charCodeAt(i)) << 18 |\n\t\t\tgetBase64Code(str.charCodeAt(i + 1)) << 12 |\n\t\t\tgetBase64Code(str.charCodeAt(i + 2)) << 6 |\n\t\t\tgetBase64Code(str.charCodeAt(i + 3));\n\t\tresult[j] = buffer >> 16;\n\t\tresult[j + 1] = (buffer >> 8) & 0xFF;\n\t\tresult[j + 2] = buffer & 0xFF;\n\t}\n\treturn result.subarray(0, result.length - missingOctets);\n}\n\nexport function base64encode(str: string, encoder: { encode: (str: string) => Uint8Array | number[] } = new TextEncoder()) {\n\treturn bytesToBase64(encoder.encode(str));\n}\n\nexport function base64decode(str: string, decoder: { decode: (bytes: Uint8Array) => string } = new TextDecoder()) {\n\treturn decoder.decode(base64ToBytes(str));\n}\n","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","let clamp = (x, a, b) => Math.max(a, Math.min(b, x));\nlet flatstep = (a, b, x) => clamp((x - a) / (b - a), 0, 1);\nlet ease = (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\nlet smoothstep = (a, b, x) => ease(flatstep(a, b, x));\nlet mix = (a, b, m) => a * (1.0 - m) + b * m;\n\n//Wrap {loop, clamp, zero}\nexport default class Interp {\n  constructor(arr, wrap = \"loop\") {\n    this.arr = arr;\n    this.wrap = wrap;\n  }\n\n  getWrap(i) {\n    if (i >= 0 && i < this.arr.length) {\n      return this.arr[i];\n    }\n\n    if (this.wrap === \"loop\") {\n      let i2 = i % this.arr.length;\n      if (i2 < 0) i2 += this.arr.length;\n      return this.arr[i2];\n    }\n\n    return i;\n  }\n\n  nearest(i) {\n    return this.arr[Math.round(i) % this.arr.length];\n  }\n\n  linear(i) {\n    let phase = i % 1;\n    let k = Math.floor(i);\n    return mix(this.getWrap(k), this.getWrap(k + 1), flatstep(0, 1, phase % 1));\n  }\n\n  smoothstep(i) {\n    let phase = i % 1;\n    let k = Math.floor(i);\n    return mix(\n      this.getWrap(k),\n      this.getWrap(k + 1),\n      smoothstep(0, 1, phase % 1)\n    );\n  }\n\n  getTangent(k) {\n    return (this.getWrap(k + 1) - this.getWrap(k - 1)) / 2;\n  }\n\n  cubic(t) {\n    const k = Math.floor(t);\n    const m = [this.getTangent(k), this.getTangent(k + 1)]; //get tangents\n    const p = [this.getWrap(k), this.getWrap(k + 1)]; //get points\n    //Translate t to interpolate between k and k+1\n    t -= k;\n    const t2 = t * t; //t^2\n    const t3 = t * t2; //t^3\n    //Apply cubic hermite spline formula\n    return (\n      (2 * t3 - 3 * t2 + 1) * p[0] +\n      (t3 - 2 * t2 + t) * m[0] +\n      (-2 * t3 + 3 * t2) * p[1] +\n      (t3 - t2) * m[1]\n    );\n  }\n}\n","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2017 Brett Zamir, 2012 Niklas von Hertzen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n/**\r\n * Encode a byte buffer as a base64 string.\r\n * @param {!Uint8Array} bytes The buffer.\r\n * @return {string} A .wav file as a DataURI.\r\n */\r\nexport function encode(bytes) {\r\n  /** @type {string} */\r\n  let base64 = '';\r\n  for (let i = 0; i < bytes.length; i += 3) {\r\n    base64 += chars[bytes[i] >> 2];\r\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\r\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\r\n    base64 += chars[bytes[i + 2] & 63];\r\n  }\r\n  if (bytes.length % 3 === 2) {\r\n    base64 = base64.substring(0, base64.length - 1) + '=';\r\n  } else if (bytes.length % 3 === 1) {\r\n    base64 = base64.substring(0, base64.length - 2) + '==';\r\n  }\r\n  return base64;\r\n}\r\n\r\n/**\r\n * Decode a base64 string as a byte as buffer.\r\n * @param {string} base64 A .wav file as a DataURI.\r\n * @return {!Uint8Array} A .wav file as a DataURI.\r\n */\r\nexport function decode(base64) {\r\n  /** @type {!Uint8Array} */\r\n  let lookup = new Uint8Array(256);\r\n  for (let i = 0; i < chars.length; i++) {\r\n    lookup[chars.charCodeAt(i)] = i;\r\n  }\r\n  /** @type {number} */\r\n  let bufferLength = base64.length * 0.75;\r\n  if (base64[base64.length - 1] === '=') {\r\n    bufferLength--;\r\n    if (base64[base64.length - 2] === '=') {\r\n      bufferLength--;\r\n    }\r\n  }\r\n  /** @type {!Uint8Array} */\r\n  let bytes = new Uint8Array(bufferLength);\r\n  for (let i = 0, j = 0; i < base64.length; i += 4) {\r\n    /** @type {number} */\r\n    let encoded1 = lookup[base64.charCodeAt(i)];\r\n    /** @type {number} */\r\n    let encoded2 = lookup[base64.charCodeAt(i + 1)];\r\n    /** @type {number} */\r\n    let encoded3 = lookup[base64.charCodeAt(i + 2)];\r\n    /** @type {number} */\r\n    let encoded4 = lookup[base64.charCodeAt(i + 3)];\r\n    bytes[j++] = encoded1 << 2 | encoded2 >> 4;\r\n    bytes[j++] = (encoded2 & 15) << 4 | encoded3 >> 2;\r\n    bytes[j++] = (encoded3 & 3) << 6 | encoded4 & 63;\r\n  }\r\n  return bytes;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview A module to change the bit depth of PCM samples.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/rochars/bitdepth\r\n */\r\n\r\n/**\r\n * Change the bit depth of PCM samples.\r\n * @param {!Array|!TypedArray} samples The original samples.\r\n * @param {string} bithDepth The original bit depth.\r\n * @param {!TypedArray} newSamples The output array.\r\n * @param {string} targetBitDepth The target bit depth.\r\n * @throws {Error} If original or target bit depths are not valid.\r\n */\r\nexport function changeBitDepth(samples, bithDepth, newSamples, targetBitDepth) {\r\n  // float to float, just copy the values\r\n  if ([\"32f\",\"64\"].indexOf(bithDepth) > -1 &&\r\n    [\"32f\",\"64\"].indexOf(targetBitDepth) > -1) {\r\n    newSamples.set(samples);\r\n    return;\r\n  }\r\n  validateBitDepth_(bithDepth);\r\n  validateBitDepth_(targetBitDepth);\r\n  /** @type {!Function} */\r\n  let toFunction = getBitDepthFunction_(bithDepth, targetBitDepth);\r\n  /** @type {!Object<string, number>} */\r\n  let options = {\r\n    oldMin: Math.pow(2, parseInt(bithDepth, 10)) / 2,\r\n    newMin: Math.pow(2, parseInt(targetBitDepth, 10)) / 2,\r\n    oldMax: (Math.pow(2, parseInt(bithDepth, 10)) / 2) - 1,\r\n    newMax: (Math.pow(2, parseInt(targetBitDepth, 10)) / 2) - 1,\r\n  };\r\n  // sign the samples if original is 8-bit\r\n  sign8Bit_(bithDepth, samples, true);\r\n  // change the resolution of the samples\r\n  for (let i = 0, len = samples.length; i < len; i++) {        \r\n    newSamples[i] = toFunction(samples[i], options);\r\n  }\r\n  // unsign the samples if target is 8-bit\r\n  sign8Bit_(targetBitDepth, newSamples, false);\r\n}\r\n\r\n/**\r\n * Change the bit depth from int to int.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction intToInt_(sample, args) {\r\n  if (sample > 0) {\r\n    sample = parseInt((sample / args.oldMax) * args.newMax, 10);\r\n  } else {\r\n    sample = parseInt((sample / args.oldMin) * args.newMin, 10);\r\n  }\r\n  return sample;\r\n}\r\n\r\n/**\r\n * Change the bit depth from float to int.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction floatToInt_(sample, args) {\r\n  return parseInt(\r\n    sample > 0 ? sample * args.newMax : sample * args.newMin, 10);\r\n}\r\n\r\n/**\r\n * Change the bit depth from int to float.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction intToFloat_(sample, args) {\r\n  return sample > 0 ? sample / args.oldMax : sample / args.oldMin;\r\n}\r\n\r\n/**\r\n * Return the function to change the bit depth of a sample.\r\n * @param {string} original The original bit depth of the data.\r\n * @param {string} target The new bit depth of the data.\r\n * @return {!Function}\r\n * @private\r\n */\r\nfunction getBitDepthFunction_(original, target) {\r\n  /** @type {!Function} */\r\n  let func = function(x) {return x;};\r\n  if (original != target) {\r\n    if ([\"32f\", \"64\"].includes(original)) {\r\n      func = floatToInt_;\r\n    } else {\r\n      if ([\"32f\", \"64\"].includes(target)) {\r\n        func = intToFloat_;\r\n      } else {\r\n        func = intToInt_;\r\n      }\r\n    }\r\n  }\r\n  return func;\r\n}\r\n\r\n/**\r\n * Validate the bit depth.\r\n * @param {string} bitDepth The original bit depth.\r\n * @throws {Error} If bit depth is not valid.\r\n * @private\r\n */\r\nfunction validateBitDepth_(bitDepth) {\r\n  if ((bitDepth != \"32f\" && bitDepth != \"64\") &&\r\n      (parseInt(bitDepth, 10) < \"8\" || parseInt(bitDepth, 10) > \"53\")) {\r\n    throw new Error(\"Invalid bit depth.\");\r\n  }\r\n}\r\n\r\n/**\r\n * Sign samples if they are 8-bit.\r\n * @param {string} bitDepth The bit depth code.\r\n * @param {!Array|!TypedArray} samples The samples.\r\n * @param {boolean} sign True to sign, false to unsign.\r\n * @private\r\n */\r\nfunction sign8Bit_(bitDepth, samples, sign) {\r\n  if (bitDepth == \"8\") {\r\n    let factor = sign ? -128 : 128;\r\n    for (let i = 0, len = samples.length; i < len; i++) {\r\n      samples[i] = samples[i] += factor;\r\n    }\r\n  }\r\n}\r\n","/*\r\n * imaadpcm: IMA ADPCM codec in JavaScript.\r\n * Copyright (c) 2018-2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2016 acida. MIT License.  \r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview IMA ADPCM codec.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/rochars/imaadpcm\r\n */\r\n\r\n/**\r\n * @type {!Array<number>}\r\n * @private\r\n */\r\nconst INDEX_TABLE = [\r\n    -1, -1, -1, -1, 2, 4, 6, 8,\r\n    -1, -1, -1, -1, 2, 4, 6, 8];\r\n/**\r\n * @type {!Array<number>}\r\n * @private\r\n */\r\nconst STEP_TABLE = [\r\n    7, 8, 9, 10, 11, 12, 13, 14,\r\n    16, 17, 19, 21, 23, 25, 28, 31,\r\n    34, 37, 41, 45, 50, 55, 60, 66,\r\n    73, 80, 88, 97, 107, 118, 130, 143,\r\n    157, 173, 190, 209, 230, 253, 279, 307,\r\n    337, 371, 408, 449, 494, 544, 598, 658,\r\n    724, 796, 876, 963, 1060, 1166, 1282, 1411,\r\n    1552, 1707, 1878, 2066, 2272, 2499, 2749, 3024,\r\n    3327, 3660, 4026, 4428, 4871, 5358, 5894, 6484,\r\n    7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,\r\n    15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794,\r\n    32767];\r\n\r\n/**\r\n * Encode 16-bit PCM samples into 4-bit IMA ADPCM samples.\r\n * @param {!Int16Array} samples A array of samples.\r\n * @return {!Uint8Array}\r\n */\r\nexport function encode(samples) {\r\n  /** @type {!Object} */\r\n  let state = {\r\n    index: 0,\r\n    predicted: 0,\r\n    step: 7\r\n  };\r\n  /** @type {!Uint8Array} */\r\n  let adpcmSamples = new Uint8Array((samples.length));\r\n  /** @type {!Array<number>} */\r\n  let block = [];\r\n  /** @type {number} */\r\n  let fileIndex = 0;\r\n  /** @type {number} */\r\n  let blockCount = 0;\r\n  for (let i = 0, len = samples.length; i < len; i++) {\r\n    if ((i % 505 == 0 && i != 0)) {\r\n      adpcmSamples.set(encodeBlock(block, state), fileIndex);\r\n      fileIndex += 256;\r\n      block = [];\r\n      blockCount++;\r\n    }\r\n    block.push(samples[i]);\r\n  }\r\n  let samplesLength = samples.length / 2;\r\n  if (samplesLength % 2) {\r\n    samplesLength++;\r\n  }\r\n  return adpcmSamples.slice(0, samplesLength + 512 + blockCount * 4);\r\n}\r\n\r\n/**\r\n * Decode IMA ADPCM samples into 16-bit PCM samples.\r\n * @param {!Uint8Array} adpcmSamples A array of ADPCM samples.\r\n * @param {number} blockAlign The block size.\r\n * @return {!Int16Array}\r\n */\r\nexport function decode(adpcmSamples, blockAlign=256) {\r\n  /** @type {!Object} */\r\n  let state = {\r\n    index: 0,\r\n    predicted: 0,\r\n    step: 7\r\n  };\r\n  /** @type {!Int16Array} */\r\n  let samples = new Int16Array(adpcmSamples.length * 2);\r\n  /** @type {!Array<number>} */\r\n  let block = [];\r\n  /** @type {number} */\r\n  let fileIndex = 0;\r\n  for (let i = 0, len = adpcmSamples.length; i < len; i++) {\r\n    if (i % blockAlign == 0 && i != 0) {            \r\n      let decoded = decodeBlock(block, state);\r\n      samples.set(decoded, fileIndex);\r\n      fileIndex += decoded.length;\r\n      block = [];\r\n    }\r\n    block.push(adpcmSamples[i]);\r\n  }\r\n  return samples;\r\n}\r\n\r\n/**\r\n * Encode a block of 505 16-bit samples as 4-bit ADPCM samples.\r\n * @param {!Array<number>} block A sample block of 505 samples.\r\n * @param {!Object} state The encoder state.\r\n * @return {!Array<number>}\r\n */\r\nfunction encodeBlock(block, state) {\r\n  /** @type {!Array<number>} */\r\n  let adpcmSamples = blockHead_(block[0], state);\r\n  for (let i = 3, len = block.length; i < len; i+=2) {\r\n    /** @type {number} */\r\n    let sample2 = encodeSample_(block[i], state);\r\n    /** @type {number} */\r\n    let sample = encodeSample_(block[i + 1], state);\r\n    adpcmSamples.push((sample << 4) | sample2);\r\n  }\r\n  return adpcmSamples;\r\n}\r\n\r\n/**\r\n * Decode a block of ADPCM samples into 16-bit PCM samples.\r\n * @param {!Array<number>} block A adpcm sample block.\r\n * @param {!Object} state The decoder state.\r\n * @return {!Array<number>}\r\n */\r\nfunction decodeBlock(block, state) {\r\n  state.predicted = sign_((block[1] << 8) | block[0]);\r\n  state.index = block[2];\r\n  state.step = STEP_TABLE[state.index];\r\n  /** @type {!Array<number>} */\r\n  let result = [\r\n      state.predicted,\r\n      state.predicted\r\n    ];\r\n  for (let i = 4, len = block.length; i < len; i++) {\r\n    /** @type {number} */\r\n    let original_sample = block[i];\r\n    /** @type {number} */\r\n    let second_sample = original_sample >> 4;\r\n    /** @type {number} */\r\n    let first_sample = (second_sample << 4) ^ original_sample;\r\n    result.push(decodeSample_(first_sample, state));\r\n    result.push(decodeSample_(second_sample, state));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Sign a 16-bit integer.\r\n * @param {number} num A 16-bit integer.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction sign_(num) {\r\n  return num > 32768 ? num - 65536 : num;\r\n}\r\n\r\n/**\r\n * Compress a 16-bit PCM sample into a 4-bit ADPCM sample.\r\n * @param {number} sample The sample.\r\n * @param {!Object} state The encoder state.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction encodeSample_(sample, state) {\r\n  /** @type {number} */\r\n  let delta = sample - state.predicted;\r\n  /** @type {number} */\r\n  let value = 0;\r\n  if (delta >= 0) {\r\n    value = 0;\r\n  } else {\r\n    value = 8;\r\n    delta = -delta;\r\n  }\r\n  /** @type {number} */\r\n  let step = STEP_TABLE[state.index];\r\n  /** @type {number} */\r\n  let diff = step >> 3;\r\n  if (delta > step) {\r\n    value |= 4;\r\n    delta -= step;\r\n    diff += step;\r\n  }\r\n  step >>= 1;\r\n  if (delta > step) {\r\n    value |= 2;\r\n    delta -= step;\r\n    diff += step;\r\n  }\r\n  step >>= 1;\r\n  if (delta > step) {\r\n    value |= 1;\r\n    diff += step;\r\n  }\r\n  updateEncoder_(value, diff, state);\r\n  return value;\r\n}\r\n\r\n/**\r\n * Set the value for encoderPredicted_ and encoderIndex_\r\n * after each sample is compressed.\r\n * @param {number} value The compressed ADPCM sample\r\n * @param {number} diff The calculated difference\r\n * @param {!Object} state The encoder state.\r\n * @private\r\n */\r\nfunction updateEncoder_(value, diff, state) {\r\n  if (value & 8) {\r\n    state.predicted -= diff;\r\n  } else {\r\n    state.predicted += diff;\r\n  }\r\n  if (state.predicted < -0x8000) {\r\n    state.predicted = -0x8000;\r\n  } else if (state.predicted > 0x7fff) {\r\n    state.predicted = 0x7fff;\r\n  }\r\n  state.index += INDEX_TABLE[value & 7];\r\n  if (state.index < 0) {\r\n    state.index = 0;\r\n  } else if (state.index > 88) {\r\n    state.index = 88;\r\n  }\r\n}\r\n\r\n/**\r\n * Decode a 4-bit ADPCM sample into a 16-bit PCM sample.\r\n * @param {number} nibble A 4-bit adpcm sample.\r\n * @param {!Object} state The decoder state.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction decodeSample_(nibble, state) {\r\n  /** @type {number} */\r\n  let difference = 0;\r\n  if (nibble & 4) {\r\n    difference += state.step;\r\n  }\r\n  if (nibble & 2) {\r\n    difference += state.step >> 1;\r\n  }\r\n  if (nibble & 1) {\r\n    difference += state.step >> 2;\r\n  }\r\n  difference += state.step >> 3;\r\n  if (nibble & 8) {\r\n    difference = -difference;\r\n  }\r\n  state.predicted += difference;\r\n  if (state.predicted > 32767) {\r\n    state.predicted = 32767;\r\n  } else if (state.predicted < -32767) {\r\n    state.predicted = -32767;\r\n  }\r\n  updateDecoder_(nibble, state);\r\n  return state.predicted;\r\n}\r\n\r\n/**\r\n * Update the index and step after decoding a sample.\r\n * @param {number} nibble A 4-bit adpcm sample.\r\n * @param {!Object} state The decoder state.\r\n * @private\r\n */\r\nfunction updateDecoder_(nibble, state) {\r\n  state.index += INDEX_TABLE[nibble];\r\n  if (state.index < 0) {\r\n    state.index = 0;\r\n  } else if (state.index > 88) {\r\n    state.index = 88;\r\n  }\r\n  state.step = STEP_TABLE[state.index];\r\n}\r\n\r\n/**\r\n * Return the head of a ADPCM sample block.\r\n * @param {number} sample The first sample of the block.\r\n * @param {!Object} state The encoder state.\r\n * @return {!Array<number>}\r\n * @private\r\n */\r\nfunction blockHead_(sample, state) {\r\n  encodeSample_(sample, state);\r\n  /** @type {!Array<number>} */\r\n  let adpcmSamples = [];\r\n  adpcmSamples.push(sample & 0xFF);\r\n  adpcmSamples.push((sample >> 8) & 0xFF);\r\n  adpcmSamples.push(state.index);\r\n  adpcmSamples.push(0);\r\n  return adpcmSamples;\r\n}\r\n","/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview A-Law codec.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/rochars/alawmulaw\r\n */\r\n\r\n/** @type {!Array<number>} */\r\nconst LOG_TABLE = [\r\n  1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5, \r\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6, \r\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, \r\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 \r\n];\r\n\r\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit A-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\r\nexport function encodeSample(sample) {\r\n  /** @type {number} */\r\n  let compandedValue; \r\n  sample = (sample ==-32768) ? -32767 : sample;\r\n  /** @type {number} */\r\n  let sign = ((~sample) >> 8) & 0x80; \r\n  if (!sign) {\r\n    sample = sample * -1; \r\n  }\r\n  if (sample > 32635) {\r\n    sample = 32635; \r\n  }\r\n  if (sample >= 256)  {\r\n    /** @type {number} */\r\n    let exponent = LOG_TABLE[(sample >> 8) & 0x7F];\r\n    /** @type {number} */\r\n    let mantissa = (sample >> (exponent + 3) ) & 0x0F; \r\n    compandedValue = ((exponent << 4) | mantissa); \r\n  } else {\r\n    compandedValue = sample >> 4; \r\n  } \r\n  return compandedValue ^ (sign ^ 0x55);\r\n}\r\n\r\n/**\r\n * Decode a 8-bit A-Law sample as 16-bit PCM.\r\n * @param {number} aLawSample The 8-bit A-Law sample\r\n * @return {number}\r\n */\r\nexport function decodeSample(aLawSample) {\r\n  /** @type {number} */\r\n  let sign = 0;\r\n  aLawSample ^= 0x55;\r\n  if ((aLawSample & 0x80) !== 0) {\r\n    aLawSample &= ~(1 << 7);\r\n    sign = -1;\r\n  }\r\n  /** @type {number} */\r\n  let position = ((aLawSample & 0xF0) >> 4) + 4;\r\n  /** @type {number} */\r\n  let decoded = 0;\r\n  if (position != 4) {\r\n    decoded = ((1 << position) |\r\n      ((aLawSample & 0x0F) << (position - 4)) |\r\n      (1 << (position - 5)));\r\n  } else {\r\n    decoded = (aLawSample << 1)|1;\r\n  }\r\n  decoded = (sign === 0) ? (decoded) : (-decoded);\r\n  return (decoded * 8) * -1;\r\n}\r\n\r\n/**\r\n * Encode 16-bit linear PCM samples as 8-bit A-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\r\nexport function encode(samples) {\r\n  /** @type {!Uint8Array} */\r\n  let aLawSamples = new Uint8Array(samples.length);\r\n  for (let i = 0, len = samples.length; i < len; i++) {\r\n    aLawSamples[i] = encodeSample(samples[i]);\r\n  }\r\n  return aLawSamples;\r\n}\r\n\r\n/**\r\n * Decode 8-bit A-Law samples into 16-bit linear PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit A-Law samples.\r\n * @return {!Int16Array}\r\n */\r\nexport function decode(samples) {\r\n  /** @type {!Int16Array} */\r\n  let pcmSamples = new Int16Array(samples.length);\r\n  for (let i = 0, len = samples.length; i < len; i++) {\r\n    pcmSamples[i] = decodeSample(samples[i]);\r\n  }\r\n  return pcmSamples;\r\n}\r\n","/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview mu-Law codec.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/rochars/alawmulaw\r\n */\r\n\r\n/**\r\n * @type {number}\r\n * @private\r\n */\r\nconst BIAS = 0x84;\r\n/**\r\n * @type {number}\r\n * @private\r\n */\r\nconst CLIP = 32635;\r\n/**\r\n * @type {Array<number>}\r\n * @private\r\n */\r\nconst encodeTable = [\r\n    0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\r\n    4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\r\n    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\r\n    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];\r\n/**\r\n * @type {Array<number>}\r\n * @private\r\n */\r\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\r\n\r\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit mu-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\r\nexport function encodeSample(sample) {\r\n  /** @type {number} */\r\n  let sign;\r\n  /** @type {number} */\r\n  let exponent;\r\n  /** @type {number} */\r\n  let mantissa;\r\n  /** @type {number} */\r\n  let muLawSample;\r\n  /** get the sample into sign-magnitude **/\r\n  sign = (sample >> 8) & 0x80;\r\n  if (sign != 0) sample = -sample;\r\n  /** convert from 16 bit linear to ulaw **/\r\n  sample = sample + BIAS;\r\n  if (sample > CLIP) sample = CLIP;\r\n  exponent = encodeTable[(sample>>7) & 0xFF];\r\n  mantissa = (sample >> (exponent+3)) & 0x0F;\r\n  muLawSample = ~(sign | (exponent << 4) | mantissa);\r\n  /** return the result **/\r\n  return muLawSample;\r\n}\r\n\r\n/**\r\n * Decode a 8-bit mu-Law sample as 16-bit PCM.\r\n * @param {number} muLawSample The 8-bit mu-Law sample\r\n * @return {number}\r\n */\r\nexport function decodeSample(muLawSample) {\r\n  /** @type {number} */\r\n  let sign;\r\n  /** @type {number} */\r\n  let exponent;\r\n  /** @type {number} */\r\n  let mantissa;\r\n  /** @type {number} */\r\n  let sample;\r\n  muLawSample = ~muLawSample;\r\n  sign = (muLawSample & 0x80);\r\n  exponent = (muLawSample >> 4) & 0x07;\r\n  mantissa = muLawSample & 0x0F;\r\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\r\n  if (sign != 0) sample = -sample;\r\n  return sample;\r\n}\r\n\r\n/**\r\n * Encode 16-bit linear PCM samples into 8-bit mu-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\r\nexport function encode(samples) {\r\n  /** @type {!Uint8Array} */\r\n  let muLawSamples = new Uint8Array(samples.length);\r\n  for (let i = 0, len = samples.length; i < len; i++) {\r\n    muLawSamples[i] = encodeSample(samples[i]);\r\n  }\r\n  return muLawSamples;\r\n}\r\n\r\n/**\r\n * Decode 8-bit mu-Law samples into 16-bit PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit mu-Law samples.\r\n * @return {!Int16Array}\r\n */\r\nexport function decode(samples) {\r\n  /** @type {!Int16Array} */\r\n  let pcmSamples = new Int16Array(samples.length);\r\n  for (let i = 0, len = samples.length; i < len; i++) {\r\n    pcmSamples[i] = decodeSample(samples[i]);\r\n  }\r\n  return pcmSamples;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview A function to swap endianness in byte buffers.\r\n * @see https://github.com/rochars/byte-data\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/**\r\n * Swap the byte ordering in a buffer. The buffer is modified in place.\r\n * @param {!(Array<number>|Uint8Array)} bytes The bytes.\r\n * @param {number} offset The byte offset.\r\n * @param {number=} [start=0] The start index.\r\n * @param {number=} [end=bytes.length] The end index.\r\n */\r\nexport function endianness(bytes, offset, start=0, end=bytes.length) {\r\n  for (let index = start; index < end; index += offset) {\r\n    swap_(bytes, offset, index);\r\n  }\r\n}\r\n\r\n/**\r\n * Swap the byte order of a value in a buffer. The buffer is modified in place.\r\n * @param {!(Array<number>|Uint8Array)} bytes The bytes.\r\n * @param {number} offset The byte offset.\r\n * @param {number} index The start index.\r\n * @private\r\n */\r\nfunction swap_(bytes, offset, index) {\r\n  offset--;\r\n  for(let x = 0; x < offset; x++) {\r\n    /** @type {number} */\r\n    let theByte = bytes[index + x];\r\n    bytes[index + x] = bytes[index + offset];\r\n    bytes[index + offset] = theByte;\r\n    offset--;\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview Encode and decode UTF8 strings to and from byte buffers.\r\n * @see https://github.com/rochars/byte-data\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://encoding.spec.whatwg.org/#the-encoding\r\n * @see https://encoding.spec.whatwg.org/#utf-8-encoder\r\n */\r\n\r\n/**\r\n * Read a string of UTF-8 characters from a byte buffer.\r\n * Invalid characters are replaced with 'REPLACEMENT CHARACTER' (U+FFFD).\r\n * @see https://encoding.spec.whatwg.org/#the-encoding\r\n * @see https://stackoverflow.com/a/34926911\r\n * @param {!Uint8Array|!Array<number>} buffer A byte buffer.\r\n * @param {number} [start=0] The buffer index to start reading.\r\n * @param {number} [end=0] The buffer index to stop reading.\r\n *   Assumes the buffer length if undefined.\r\n * @return {string}\r\n */\r\nexport function unpack(buffer, start=0, end=buffer.length) {\r\n  /** @type {string} */\r\n  let str = '';\r\n  for(let index = start; index < end;) {\r\n    /** @type {number} */\r\n    let lowerBoundary = 0x80;\r\n    /** @type {number} */\r\n    let upperBoundary = 0xBF;\r\n    /** @type {boolean} */\r\n    let replace = false;\r\n    /** @type {number} */\r\n    let charCode = buffer[index++];\r\n    if (charCode >= 0x00 && charCode <= 0x7F) {\r\n      str += String.fromCharCode(charCode);\r\n    } else {\r\n      /** @type {number} */\r\n      let count = 0;\r\n      if (charCode >= 0xC2 && charCode <= 0xDF) {\r\n        count = 1;\r\n      } else if (charCode >= 0xE0 && charCode <= 0xEF ) {\r\n        count = 2;\r\n        if (buffer[index] === 0xE0) {\r\n          lowerBoundary = 0xA0;\r\n        }\r\n        if (buffer[index] === 0xED) {\r\n          upperBoundary = 0x9F;\r\n        }\r\n      } else if (charCode >= 0xF0 && charCode <= 0xF4 ) {\r\n        count = 3;\r\n        if (buffer[index] === 0xF0) {\r\n          lowerBoundary = 0x90;\r\n        }\r\n        if (buffer[index] === 0xF4) {\r\n          upperBoundary = 0x8F;\r\n        }\r\n      } else {\r\n        replace = true;\r\n      }\r\n      charCode = charCode & (1 << (8 - count - 1)) - 1;\r\n      for (let i = 0; i < count; i++) {\r\n        if (buffer[index] < lowerBoundary || buffer[index] > upperBoundary) {\r\n          replace = true;\r\n        }\r\n        charCode = (charCode << 6) | (buffer[index] & 0x3f);\r\n        index++;\r\n      }\r\n      if (replace) {\r\n        str += String.fromCharCode(0xFFFD);\r\n      } \r\n      else if (charCode <= 0xffff) {\r\n        str += String.fromCharCode(charCode);\r\n      } else {\r\n        charCode -= 0x10000;\r\n        str += String.fromCharCode(\r\n          ((charCode >> 10) & 0x3ff) + 0xd800,\r\n          (charCode & 0x3ff) + 0xdc00);\r\n      }\r\n    }\r\n  }\r\n  return str;\r\n}\r\n\r\n/**\r\n * Write a string of UTF-8 characters to a byte buffer.\r\n * @see https://encoding.spec.whatwg.org/#utf-8-encoder\r\n * @param {string} str The string to pack.\r\n * @param {!Uint8Array|!Array<number>} buffer The buffer to pack the string to.\r\n * @param {number=} index The buffer index to start writing.\r\n * @return {number} The next index to write in the buffer.\r\n */\r\nexport function pack(str, buffer, index=0) {\r\n  /** @type {number} */\r\n  let i = 0;\r\n  /** @type {number} */\r\n  let len = str.length;\r\n  while (i < len) {\r\n    /** @type {number} */\r\n    let codePoint = str.codePointAt(i);\r\n    if (codePoint < 128) {\r\n      buffer[index] = codePoint;\r\n      index++;\r\n    } else {\r\n      /** @type {number} */\r\n      let count = 0;\r\n      /** @type {number} */\r\n      let offset = 0;\r\n      if (codePoint <= 0x07FF) {\r\n        count = 1;\r\n        offset = 0xC0;\r\n      } else if(codePoint <= 0xFFFF) {\r\n        count = 2;\r\n        offset = 0xE0;\r\n      } else if(codePoint <= 0x10FFFF) {\r\n        count = 3;\r\n        offset = 0xF0;\r\n        i++;\r\n      }\r\n      buffer[index] = (codePoint >> (6 * count)) + offset;\r\n      index++;\r\n      while (count > 0) {\r\n        buffer[index] = 0x80 | (codePoint >> (6 * (count - 1)) & 0x3F);\r\n        index++;\r\n        count--;\r\n      }\r\n    }\r\n    i++;\r\n  }\r\n  return index;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview Encode and decode int numbers to and from byte buffers.\r\n * @see https://github.com/rochars/byte-data\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/**\r\n * A class to write and read integer numbers to and from byte buffers.\r\n */\r\nexport class IntParser {\r\n  \r\n  /**\r\n   * @param {number} bits The number of bits used by the integer.\r\n   * @param {boolean} [signed=false] True for signed, false otherwise.\r\n   */\r\n  constructor(bits, signed=false) {\r\n    /**\r\n     * The number of bits used by one number.\r\n     * @type {number}\r\n     */\r\n    this.bits = bits;\r\n    /**\r\n     * The number of bytes used by one number.\r\n     * @type {number}\r\n     */\r\n    this.offset = Math.ceil(bits / 8);\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.max = Math.pow(2, bits) - 1;\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.min = 0;\r\n    /**\r\n     * @type {Function}\r\n     */\r\n    this.unpack = this.unpack_;\r\n    if (signed) {\r\n      this.max = Math.pow(2, bits) / 2 - 1;\r\n      this.min = -this.max - 1;\r\n      this.unpack = this.unpackSigned_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write one unsigned integer to a byte buffer.\r\n   * @param {!(Uint8Array|Array<number>)} buffer An array of bytes.\r\n   * @param {number} num The number. Overflows are truncated.\r\n   * @param {number} [index=0] The index being written in the byte buffer.\r\n   * @return {number} The next index to write on the byte buffer.\r\n   */\r\n  pack(buffer, num, index=0) {\r\n    num = this.clamp_(Math.round(num));\r\n    for (let i = 0, len = this.offset; i < len; i++) {\r\n      buffer[index] = Math.floor(num / Math.pow(2, i * 8)) & 255;\r\n      index++;\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Read one unsigned integer from a byte buffer.\r\n   * Does not check for overflows.\r\n   * @param {!(Uint8Array|Array<number>)} buffer An array of bytes.\r\n   * @param {number} [index=0] The index to read.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  unpack_(buffer, index=0) {\r\n    /** @type {number} */\r\n    let num = 0;\r\n    for(let x = 0; x < this.offset; x++) {\r\n      num += buffer[index + x] * Math.pow(256, x);\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /**\r\n   * Read one two's complement signed integer from a byte buffer.\r\n   * @param {!(Uint8Array|Array<number>)} buffer An array of bytes.\r\n   * @param {number} [index=0] The index to read.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  unpackSigned_(buffer, index=0) {\r\n    return this.sign_(this.unpack_(buffer, index));\r\n  }\r\n\r\n  /**\r\n   * Clamp values on overflow.\r\n   * @param {number} num The number.\r\n   * @private\r\n   */\r\n  clamp_(num) {\r\n    if (num > this.max) {\r\n      return this.max;\r\n    } else if (num < this.min) {\r\n      return this.min;\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /**\r\n   * Sign a number.\r\n   * @param {number} num The number.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  sign_(num) {\r\n    if (num > this.max) {\r\n      num -= (this.max * 2) + 2;\r\n    }\r\n    return num;\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2018-2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2013 DeNA Co., Ltd.\r\n * Copyright (c) 2010, Linden Research, Inc\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview Encode and decode IEEE 754 floating point numbers.\r\n * @see https://github.com/rochars/byte-data\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://bitbucket.org/lindenlab/llsd/raw/7d2646cd3f9b4c806e73aebc4b32bd81e4047fdc/js/typedarray.js\r\n * @see https://github.com/kazuho/ieee754.js/blob/master/ieee754.js\r\n */\r\n\r\n/**\r\n * A class to encode and decode IEEE 754 floating-point numbers.\r\n */\r\nexport class FloatParser {\r\n\r\n  /**\r\n   * Pack a IEEE 754 floating point number.\r\n   * @param {number} ebits The exponent bits.\r\n   * @param {number} fbits The fraction bits.\r\n   */\r\n  constructor(ebits, fbits) {\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.offset = Math.ceil((ebits + fbits) / 8);\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.ebits = ebits;\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.fbits = fbits;\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.bias = (1 << (ebits - 1)) - 1;\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.biasP2 = Math.pow(2, this.bias + 1);\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.ebitsFbits = (ebits + fbits);\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.fbias = Math.pow(2, -(8 * this.offset - 1 - ebits));\r\n  }\r\n\r\n  /**\r\n   * Pack a IEEE 754 floating point number.\r\n   * @param {!Uint8Array|!Array<number>} buffer The buffer.\r\n   * @param {number} num The number.\r\n   * @param {number} index The index to write on the buffer.\r\n   * @return {number} The next index to write on the buffer.\r\n   */\r\n  pack(buffer, num, index) {\r\n    // Round overflows\r\n    if (Math.abs(num) > this.biasP2 - (this.ebitsFbits * 2)) {\r\n      num = num < 0 ? -Infinity : Infinity;\r\n    }\r\n    /**\r\n     * sign, need this to handle negative zero\r\n     * @see http://cwestblog.com/2014/02/25/javascript-testing-for-negative-zero/\r\n     * @type {number}\r\n     */\r\n    let sign = (((num = +num) || 1 / num) < 0) ? 1 : num < 0 ? 1 : 0;\r\n    num = Math.abs(num);\r\n    /** @type {number} */\r\n    let exp = Math.min(Math.floor(Math.log(num) / Math.LN2), 1023);\r\n    /** @type {number} */\r\n    let fraction = roundToEven(num / Math.pow(2, exp) * Math.pow(2, this.fbits));\r\n    // NaN\r\n    if (num !== num) {\r\n      fraction = Math.pow(2, this.fbits - 1);\r\n      exp = (1 << this.ebits) - 1;\r\n    // Number\r\n    } else if (num !== 0) {\r\n      if (num >= Math.pow(2, 1 - this.bias)) {\r\n        if (fraction / Math.pow(2, this.fbits) >= 2) {\r\n          exp = exp + 1;\r\n          fraction = 1;\r\n        }\r\n        // Overflow\r\n        if (exp > this.bias) {\r\n          exp = (1 << this.ebits) - 1;\r\n          fraction = 0;\r\n        } else {\r\n          exp = exp + this.bias;\r\n          fraction = roundToEven(fraction) - Math.pow(2, this.fbits);\r\n        }\r\n      } else {\r\n        fraction = roundToEven(num / Math.pow(2, 1 - this.bias - this.fbits));\r\n        exp = 0;\r\n      } \r\n    }\r\n    return this.packFloatBits_(buffer, index, sign, exp, fraction);\r\n  }\r\n\r\n  /**\r\n   * Unpack a IEEE 754 floating point number.\r\n   * Derived from IEEE754 by DeNA Co., Ltd., MIT License. \r\n   * Adapted to handle NaN. Should port the solution to the original repo.\r\n   * @param {!Uint8Array|!Array<number>} buffer The buffer.\r\n   * @param {number} index The index to read from the buffer.\r\n   * @return {number} The floating point number.\r\n   */\r\n  unpack(buffer, index) {\r\n    /** @type {number} */\r\n    let eMax = (1 << this.ebits) - 1;\r\n    /** @type {number} */\r\n    let significand;\r\n    /** @type {string} */\r\n    let leftBits = \"\";\r\n    for (let i = this.offset - 1; i >= 0 ; i--) {\r\n      /** @type {string} */\r\n      let t = buffer[i + index].toString(2);\r\n      leftBits += \"00000000\".substring(t.length) + t;\r\n    }\r\n    /** @type {number} */\r\n    let sign = leftBits.charAt(0) == \"1\" ? -1 : 1;\r\n    leftBits = leftBits.substring(1);\r\n    /** @type {number} */\r\n    let exponent = parseInt(leftBits.substring(0, this.ebits), 2);\r\n    leftBits = leftBits.substring(this.ebits);\r\n    if (exponent == eMax) {\r\n      if (parseInt(leftBits, 2) !== 0) {\r\n        return NaN;\r\n      }\r\n      return sign * Infinity;  \r\n    } else if (exponent === 0) {\r\n      exponent += 1;\r\n      significand = parseInt(leftBits, 2);\r\n    } else {\r\n      significand = parseInt(\"1\" + leftBits, 2);\r\n    }\r\n    return sign * significand * this.fbias * Math.pow(2, exponent - this.bias);\r\n  }\r\n\r\n  /**\r\n   * Pack a IEEE754 from its sign, exponent and fraction bits\r\n   * and place it in a byte buffer.\r\n   * @param {!Uint8Array|!Array<number>} buffer The byte buffer to write to.\r\n   * @param {number} index The buffer index to write.\r\n   * @param {number} sign The sign.\r\n   * @param {number} exp the exponent.\r\n   * @param {number} fraction The fraction.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  packFloatBits_(buffer, index, sign, exp, fraction) {\r\n    /** @type {!Array<number>} */\r\n    let bits = [];\r\n    // the sign\r\n    bits.push(sign);\r\n    // the exponent\r\n    for (let i = this.ebits; i > 0; i -= 1) {\r\n      bits[i] = (exp % 2 ? 1 : 0);\r\n      exp = Math.floor(exp / 2);\r\n    }\r\n    // the fraction\r\n    let len = bits.length;\r\n    for (let i = this.fbits; i > 0; i -= 1) {\r\n      bits[len + i] = (fraction % 2 ? 1 : 0);\r\n      fraction = Math.floor(fraction / 2);\r\n    }\r\n    // pack as bytes\r\n    /** @type {string} */\r\n    let str = bits.join('');\r\n    /** @type {number} */\r\n    let offset = this.offset + index - 1;\r\n    /** @type {number} */\r\n    let k = index;\r\n    while (offset >= index) {\r\n      buffer[offset] = parseInt(str.substring(0, 8), 2);\r\n      str = str.substring(8);\r\n      offset--;\r\n      k++;\r\n    }\r\n    return k;\r\n  }\r\n}\r\n\r\n/**\r\n * Round a number to its nearest even value.\r\n * @param {number} n The number.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction roundToEven(n) {\r\n  /** @type {number} */\r\n  let w = Math.floor(n);\r\n  let f = n - w;\r\n  if (f < 0.5) {\r\n    return w;\r\n  }\r\n  if (f > 0.5) {\r\n    return w + 1;\r\n  }\r\n  return w % 2 ? w + 1 : w;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview binary parser.\r\n * @see https://github.com/rochars/byte-data\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { endianness } from './lib/endianness';\r\nimport { pack as packUTF8, unpack as unpackUTF8 } from './lib/utf8-parser';\r\nimport { IntParser } from './lib/int-parser';\r\nimport { FloatParser } from './lib/float-parser';\r\n\r\n/**\r\n * Read a string of UTF-8 characters from a byte buffer.\r\n * @param {!(Uint8Array|Array<number>)} buffer A byte buffer.\r\n * @param {number} [index=0] The buffer index to start reading.\r\n * @param {number} [end=buffer.length] The index to stop reading, non inclusive.\r\n * @return {string}\r\n */\r\nexport function unpackString(buffer, index=0, end=buffer.length) {\r\n  return unpackUTF8(buffer, index, end);\r\n}\r\n\r\n/**\r\n * Write a string of UTF-8 characters as a byte buffer.\r\n * @param {string} str The string to pack.\r\n * @return {!Array<number>} The UTF-8 string bytes.\r\n */\r\nexport function packString(str) {\r\n  /** @type {!Array<number>} */\r\n  let buffer = [];\r\n  packUTF8(str, buffer);\r\n  return buffer;\r\n}\r\n\r\n/**\r\n * Write a string of UTF-8 characters to a byte buffer.\r\n * @param {string} str The string to pack.\r\n * @param {!(Uint8Array|Array<number>)} buffer The output buffer.\r\n * @param {number} [index=0] The buffer index to start writing.\r\n * @return {number} The next index to write in the buffer.\r\n */\r\nexport function packStringTo(str, buffer, index=0) {\r\n  return packUTF8(str, buffer, index);\r\n}\r\n\r\n// Numbers\r\n/**\r\n * Pack a array of numbers to a byte buffer.\r\n * All other packing functions are interfaces to this function.\r\n * @param {!(Array<number>|TypedArray)} values The values to pack.\r\n * @param {!{bits:number,\r\n *   fp: (boolean|undefined),\r\n *   signed: (boolean|undefined),\r\n *   be: (boolean|undefined)}} theType The type definition.\r\n * @param {!(Uint8Array|Array<number>)} buffer The buffer to write on.\r\n * @param {number} [index=0] The buffer index to start writing.\r\n * @return {number} The next index to write.\r\n * @throws {Error} If the type definition is not valid.\r\n */\r\nexport function packArrayTo(values, theType, buffer, index=0) {\r\n  theType = theType || {};\r\n  /** @type {!Object} */\r\n  let packer = getParser_(theType.bits, theType.fp, theType.signed);\r\n  /** @type {number} */\r\n  let offset = Math.ceil(theType.bits / 8);\r\n  /** @type {number} */\r\n  let i = 0;\r\n  /** @type {number} */\r\n  let start = index;\r\n  for (let valuesLen = values.length; i < valuesLen; i++) {\r\n    index = packer.pack(buffer, values[i], index);\r\n  }\r\n  if (theType.be) {\r\n    endianness(buffer, offset, start, index);\r\n  }\r\n  return index;\r\n}\r\n\r\n/**\r\n * Unpack a array of numbers from a byte buffer to a array or a typed array.\r\n * All other unpacking functions are interfaces to this function.\r\n * @param {!(Uint8Array|Array<number>)} buffer The byte buffer.\r\n * @param {!{bits:number,\r\n *   fp: (boolean|undefined),\r\n *   signed: (boolean|undefined),\r\n *   be: (boolean|undefined)}} theType The type definition.\r\n * @param {!(TypedArray|Array<number>)} output The output array or typed array.\r\n * @param {number} [start=0] The buffer index to start reading.\r\n * @param {number} [end=buffer.length] The buffer index to stop reading.\r\n * @throws {Error} If the type definition is not valid.\r\n */\r\nexport function unpackArrayTo(\r\n    buffer, theType, output, start=0, end=buffer.length) {\r\n  theType = theType || {};\r\n  /** @type {!Object} */\r\n  let parser = getParser_(theType.bits, theType.fp, theType.signed);\r\n  // getUnpackLen_ will adjust the end index according to the size\r\n  // of the input buffer and the byte offset or throw a error on bad\r\n  // end index if safe=true\r\n  end = getUnpackLen_(buffer, start, end, parser.offset);\r\n  if (theType.be) {\r\n    /** @type {!(Uint8Array|Array<number>)} */\r\n    let readBuffer = copyBuffer_(buffer);\r\n    if (theType.be) {\r\n      endianness(readBuffer, parser.offset, start, end);\r\n    }\r\n    unpack_(readBuffer, output, start, end, parser);\r\n  } else {\r\n    unpack_(buffer, output, start, end, parser);\r\n  }\r\n}\r\n\r\n/**\r\n * Pack a number to a byte buffer.\r\n * @param {number} value The value.\r\n * @param {!{bits:number,\r\n *   fp: (boolean|undefined),\r\n *   signed: (boolean|undefined),\r\n *   be: (boolean|undefined)}} theType The type definition.\r\n * @param {!(Uint8Array|Array<number>)} buffer The byte buffer to write on.\r\n * @param {number} [index=0] The buffer index to write.\r\n * @return {number} The next index to write.\r\n * @throws {Error} If the type definition is not valid.\r\n */\r\nexport function packTo(value, theType, buffer, index=0) {\r\n  return packArrayTo([value], theType, buffer, index);\r\n}\r\n\r\n/**\r\n * Pack a number as a array of bytes.\r\n * @param {number} value The number to pack.\r\n * @param {!{bits:number,\r\n *   fp: (boolean|undefined),\r\n *   signed: (boolean|undefined),\r\n *   be: (boolean|undefined)}} theType The type definition.\r\n * @return {!Array<number>} The packed value.\r\n * @throws {Error} If the type definition is not valid.\r\n */\r\nexport function pack(value, theType) {\r\n  /** @type {!Array<number>} */\r\n  let output = [];\r\n  packTo(value, theType, output, 0);\r\n  return output;\r\n}\r\n\r\n/**\r\n * Unpack a number from a byte buffer.\r\n * @param {!(Uint8Array|Array<number>)} buffer The byte buffer.\r\n * @param {!{bits:number,\r\n *   fp: (boolean|undefined),\r\n *   signed: (boolean|undefined),\r\n *   be: (boolean|undefined)}} theType The type definition.\r\n * @param {number} [index=0] The buffer index to read.\r\n * @return {number}\r\n * @throws {Error} If the type definition is not valid.\r\n */\r\nexport function unpack(buffer, theType, index=0) {\r\n  let output = [];\r\n  unpackArrayTo(buffer, theType, output,\r\n    index, index + Math.ceil(theType.bits / 8));\r\n  return output[0];\r\n}\r\n\r\n/**\r\n * Unpack a array of numbers from a byte buffer to a array or a typed array.\r\n * @param {!(Uint8Array|Array<number>)} buffer The byte buffer.\r\n * @param {!(TypedArray|Array<number>)} output The output array or typed array.\r\n * @param {number} start The buffer index to start reading.\r\n * @param {number} end The buffer index to stop reading.\r\n * @param {!Object} parser The parser.\r\n * @private\r\n */\r\nfunction unpack_(buffer, output, start, end, parser) {\r\n  /** @type {number} */\r\n  let offset = parser.offset;\r\n  for (let index = 0, j = start; j < end; j += offset, index++) {\r\n    output[index] = parser.unpack(buffer, j);\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a byte buffer as a Array or Uint8Array.\r\n * @param {!(Uint8Array|Array<number>)} buffer The byte buffer.\r\n * @return {!(Uint8Array|Array<number>)}\r\n * @private\r\n */\r\nfunction copyBuffer_(buffer) {\r\n  return new Uint8Array(buffer);\r\n}\r\n\r\n/**\r\n * Adjust the end index according to the input buffer length and the\r\n * type offset.\r\n * @param {!(Uint8Array|Array<number>)} buffer The byte buffer.\r\n * @param {number} start The buffer index to start reading.\r\n * @param {number} end The buffer index to stop reading.\r\n * @param {number} offset The number of bytes used by the type.\r\n * @private\r\n */\r\nfunction getUnpackLen_(buffer, start, end, offset) {\r\n  /** @type {number} */\r\n  let extra = (end - start) % offset;\r\n  return end - extra;\r\n}\r\n\r\n/**\r\n * Return a parser for int, uint or fp numbers.\r\n * @param {number} bits The number of bits.\r\n * @param {boolean|undefined} fp True for fp numbers, false otherwise.\r\n * @param {boolean|undefined} signed True for signed ints, false otherwise.\r\n * @return {!Object}\r\n * @private\r\n */\r\nfunction getParser_(bits, fp, signed) {\r\n  if (fp && bits == 32) {\r\n    return new FloatParser(8, 23);\r\n  } else if(fp && bits == 64) {\r\n    return new FloatParser(11, 52);\r\n  }\r\n  return new IntParser(bits, signed);\r\n}\r\n","import superPropBase from \"@babel/runtime/helpers/esm/superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The writeString function.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { packString } from './binary';\r\n\r\n/**\r\n * Pack a string an array of bytes. If the packed string length is smaller\r\n * than the desired byte length the output array is filled with 0s.\r\n * @param {string} str The string to be written as bytes.\r\n * @param {number} byteLength the size of the string in bytes.\r\n * @return {!Array<number>} The packed string.\r\n */\r\nexport function writeString(str, byteLength) {\r\n  /** @type {!Array<number>} */   \r\n  let packedString = packString(str);\r\n  for (let i = packedString.length; i < byteLength; i++) {\r\n    packedString.push(0);\r\n  }\r\n  return packedString;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The interleave function.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/**\r\n * Interleave de-interleaved samples.\r\n * @param {!(Array|TypedArray)} samples The samples.\r\n * @return {!(Array|TypedArray)}\r\n */\r\nexport function interleave(samples) {\r\n  /** @type {!(Array|TypedArray)} */\r\n  let finalSamples = [];\r\n  if (samples.length > 0) {\r\n    if (samples[0].constructor !== Number) {\r\n      finalSamples = new Float64Array(samples[0].length * samples.length);\r\n      for (let i = 0, len = samples[0].length, x = 0; i < len; i++) {\r\n        for (let j = 0, subLen = samples.length; j < subLen; j++, x++) {\r\n          finalSamples[x] = samples[j][i];\r\n        }\r\n      }\r\n    } else {\r\n      finalSamples = samples;\r\n    }\r\n  }\r\n  return finalSamples;\r\n}\r\n\r\n/**\r\n * De-interleave samples into multiple channels.\r\n * @param {!(Array|TypedArray)} samples The samples.\r\n * @param {number} numChannels The number of channels to split the samples.\r\n * @param {Function} [OutputObject=Float64Array] The type of object to\r\n *   write the de-interleaved samples.\r\n * @return {!(Array|TypedArray)}\r\n */\r\nexport function deInterleave(samples, numChannels, OutputObject=Float64Array) {\r\n  /** @type {!(Array|TypedArray)} */\r\n  let finalSamples = [];\r\n  for (let i = 0; i < numChannels; i++) {\r\n    finalSamples[i] = new OutputObject(samples.length / numChannels);\r\n  }\r\n  for (let i = 0; i < numChannels; i++) {\r\n    for (let j = i, s = 0; j < samples.length; j+= numChannels, s++) {\r\n      finalSamples[i][s] = samples[j];\r\n    }\r\n  }\r\n  return finalSamples;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The validateSampleRate function.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/**\r\n * Validate the sample rate value of a wav file according to the number of\r\n * channels and the bit depth of the audio.\r\n * @param {number} channels The number of channels in the file.\r\n * @param {number} bits The number of bits per sample.\r\n * @param {number} sampleRate The sample rate to be validated.\r\n * @return {boolean} True is the sample rate is valid, false otherwise.\r\n */\r\nexport function validateSampleRate(channels, bits, sampleRate) {\r\n  /** @type {number} */\r\n  let byteRate = channels * (bits / 8) * sampleRate;\r\n  if (sampleRate < 1 || byteRate > 4294967295) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFileCueEditor class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { WaveFileTagEditor } from './wavefile-tag-editor';\r\n\r\n/**\r\n * A class to edit meta information in wav files.\r\n * @extends WaveFileTagEditor\r\n * @ignore\r\n */\r\nexport class WaveFileCueEditor extends WaveFileTagEditor {\r\n\r\n  /**\r\n   * Return an array with all cue points in the file, in the order they appear\r\n   * in the file.\r\n   * Objects representing cue points/regions look like this:\r\n   *   {\r\n   *     position: 500, // the position in milliseconds\r\n   *     label: 'cue marker 1',\r\n   *     end: 1500, // the end position in milliseconds\r\n   *     dwName: 1,\r\n   *     dwPosition: 0,\r\n   *     fccChunk: 'data',\r\n   *     dwChunkStart: 0,\r\n   *     dwBlockStart: 0,\r\n   *     dwSampleOffset: 22050, // the position as a sample offset\r\n   *     dwSampleLength: 3646827, // length as a sample count, 0 if not a region\r\n   *     dwPurposeID: 544106354,\r\n   *     dwCountry: 0,\r\n   *     dwLanguage: 0,\r\n   *     dwDialect: 0,\r\n   *     dwCodePage: 0,\r\n   *   }\r\n   * @return {!Array<Object>}\r\n   */\r\n  listCuePoints() {\r\n    /** @type {!Array<!Object>} */\r\n    let points = this.getCuePoints_();\r\n    for (let i = 0, len = points.length; i < len; i++) {\r\n\r\n      // Add attrs that should exist in the object\r\n      points[i].position =\r\n        (points[i].dwSampleOffset / this.fmt.sampleRate) * 1000;\r\n\r\n      // If it is a region, calc the end\r\n      // position in milliseconds\r\n      if (points[i].dwSampleLength) {\r\n        points[i].end =\r\n          (points[i].dwSampleLength / this.fmt.sampleRate) * 1000;\r\n        points[i].end += points[i].position;\r\n      // If its not a region, end should be null\r\n      } else {\r\n        points[i].end = null;\r\n      }\r\n\r\n      // Remove attrs that should not go in the results\r\n      delete points[i].value;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Create a cue point in the wave file.\r\n   * @param {!{\r\n   *   position: number,\r\n   *   label: ?string,\r\n   *   end: ?number,\r\n   *   dwPurposeID: ?number,\r\n   *   dwCountry: ?number,\r\n   *   dwLanguage: ?number,\r\n   *   dwDialect: ?number,\r\n   *   dwCodePage: ?number\r\n   * }} pointData A object with the data of the cue point.\r\n   *\r\n   * # Only required attribute to create a cue point:\r\n   * pointData.position: The position of the point in milliseconds\r\n   *\r\n   * # Optional attribute for cue points:\r\n   * pointData.label: A string label for the cue point\r\n   *\r\n   * # Extra data used for regions\r\n   * pointData.end: A number representing the end of the region,\r\n   *   in milliseconds, counting from the start of the file. If\r\n   *   no end attr is specified then no region is created.\r\n   *\r\n   * # You may also specify the following attrs for regions, all optional:\r\n   * pointData.dwPurposeID\r\n   * pointData.dwCountry\r\n   * pointData.dwLanguage\r\n   * pointData.dwDialect\r\n   * pointData.dwCodePage\r\n   */\r\n  setCuePoint(pointData) {\r\n    this.cue.chunkId = 'cue ';\r\n\r\n    // label attr should always exist\r\n    if (!pointData.label) {\r\n      pointData.label = '';\r\n    }\r\n\r\n    /**\r\n     * Load the existing points before erasing\r\n     * the LIST 'adtl' chunk and the cue attr\r\n     * @type {!Array<!Object>}\r\n     */\r\n    let existingPoints = this.getCuePoints_();\r\n\r\n    // Clear any LIST labeled 'adtl'\r\n    // The LIST chunk should be re-written\r\n    // after the new cue point is created\r\n    this.clearLISTadtl_();\r\n\r\n    // Erase this.cue so it can be re-written\r\n    // after the point is added\r\n    this.cue.points = [];\r\n\r\n    /**\r\n     * Cue position param is informed in milliseconds,\r\n     * here its value is converted to the sample offset\r\n     * @type {number}\r\n     */\r\n    pointData.dwSampleOffset =\r\n      (pointData.position * this.fmt.sampleRate) / 1000;\r\n    /**\r\n     * end param is informed in milliseconds, counting\r\n     * from the start of the file.\r\n     * here its value is converted to the sample length\r\n     * of the region.\r\n     * @type {number}\r\n     */\r\n    pointData.dwSampleLength = 0;\r\n    if (pointData.end) {\r\n      pointData.dwSampleLength = \r\n        ((pointData.end * this.fmt.sampleRate) / 1000) -\r\n        pointData.dwSampleOffset;\r\n    }\r\n\r\n    // If there were no cue points in the file,\r\n    // insert the new cue point as the first\r\n    if (existingPoints.length === 0) {\r\n      this.setCuePoint_(pointData, 1);\r\n\r\n    // If the file already had cue points, This new one\r\n    // must be added in the list according to its position.\r\n    } else {\r\n      this.setCuePointInOrder_(existingPoints, pointData);\r\n    }\r\n    this.cue.dwCuePoints = this.cue.points.length;\r\n  }\r\n\r\n  /**\r\n   * Remove a cue point from a wave file.\r\n   * @param {number} index the index of the point. First is 1,\r\n   *    second is 2, and so on.\r\n   */\r\n  deleteCuePoint(index) {\r\n    this.cue.chunkId = 'cue ';\r\n    /** @type {!Array<!Object>} */\r\n    let existingPoints = this.getCuePoints_();\r\n    this.clearLISTadtl_();\r\n    /** @type {number} */\r\n    let len = this.cue.points.length;\r\n    this.cue.points = [];\r\n    for (let i = 0; i < len; i++) {\r\n      if (i + 1 !== index) {\r\n        this.setCuePoint_(existingPoints[i], i + 1);\r\n      }\r\n    }\r\n    this.cue.dwCuePoints = this.cue.points.length;\r\n    if (this.cue.dwCuePoints) {\r\n      this.cue.chunkId = 'cue ';\r\n    } else {\r\n      this.cue.chunkId = '';\r\n      this.clearLISTadtl_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the label of a cue point.\r\n   * @param {number} pointIndex The ID of the cue point.\r\n   * @param {string} label The new text for the label.\r\n   */\r\n  updateLabel(pointIndex, label) {\r\n    /** @type {?number} */\r\n    let cIndex = this.getLISTIndex('adtl');\r\n    if (cIndex !== null) {\r\n      for (let i = 0, len = this.LIST[cIndex].subChunks.length; i < len; i++) {\r\n        if (this.LIST[cIndex].subChunks[i].dwName ==\r\n            pointIndex) {\r\n          this.LIST[cIndex].subChunks[i].value = label;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an array with all cue points in the file, in the order they appear\r\n   * in the file.\r\n   * @return {!Array<!Object>}\r\n   * @private\r\n   */\r\n  getCuePoints_() {\r\n    /** @type {!Array<!Object>} */\r\n    let points = [];\r\n    for (let i = 0; i < this.cue.points.length; i++) {\r\n      /** @type {!Object} */\r\n      let chunk = this.cue.points[i];\r\n      /** @type {!Object} */\r\n      let pointData = this.getDataForCuePoint_(chunk.dwName);\r\n      pointData.label = pointData.value ? pointData.value : '';\r\n      pointData.dwPosition = chunk.dwPosition;\r\n      pointData.fccChunk = chunk.fccChunk;\r\n      pointData.dwChunkStart = chunk.dwChunkStart;\r\n      pointData.dwBlockStart = chunk.dwBlockStart;\r\n      pointData.dwSampleOffset = chunk.dwSampleOffset;\r\n      points.push(pointData);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Return the associated data of a cue point.\r\n   * @param {number} pointDwName The ID of the cue point.\r\n   * @return {!Object}\r\n   * @private\r\n   */\r\n  getDataForCuePoint_(pointDwName) {\r\n    /** @type {?number} */\r\n    let LISTindex = this.getLISTIndex('adtl');\r\n    /** @type {!Object} */\r\n    let pointData = {};\r\n    // If there is a adtl LIST in the file, look for\r\n    // LIST subchunks with data referencing this point\r\n    if (LISTindex !== null) {\r\n      this.getCueDataFromLIST_(pointData, LISTindex, pointDwName);\r\n    }\r\n    return pointData;\r\n  }\r\n\r\n  /**\r\n   * Get all data associated to a cue point in a LIST chunk.\r\n   * @param {!Object} pointData A object to hold the point data.\r\n   * @param {number} index The index of the adtl LIST chunk.\r\n   * @param {number} pointDwName The ID of the cue point.\r\n   * @private\r\n   */\r\n  getCueDataFromLIST_(pointData, index, pointDwName) {\r\n    // got through all chunks in the adtl LIST checking\r\n    // for references to this cue point\r\n    for (let i = 0, len = this.LIST[index].subChunks.length; i < len; i++) {\r\n      if (this.LIST[index].subChunks[i].dwName == pointDwName) {\r\n        /** @type {!Object} */\r\n        let chunk = this.LIST[index].subChunks[i];\r\n        // Some chunks may reference the point but\r\n        // have a empty text; this is to ensure that if\r\n        // one chunk that reference the point has a text,\r\n        // this value will be kept as the associated data label\r\n        // for the cue point.\r\n        // If different values are present, the last value found\r\n        // will be considered the label for the cue point.\r\n        pointData.value = chunk.value || pointData.value;\r\n        pointData.dwName = chunk.dwName || 0;\r\n        pointData.dwSampleLength = chunk.dwSampleLength || 0;\r\n        pointData.dwPurposeID = chunk.dwPurposeID || 0;\r\n        pointData.dwCountry = chunk.dwCountry || 0;\r\n        pointData.dwLanguage = chunk.dwLanguage || 0;\r\n        pointData.dwDialect = chunk.dwDialect || 0;\r\n        pointData.dwCodePage = chunk.dwCodePage || 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Push a new cue point in this.cue.points.\r\n   * @param {!Object} pointData A object with data of the cue point.\r\n   * @param {number} dwName the dwName of the cue point\r\n   * @private\r\n   */\r\n  setCuePoint_(pointData, dwName) {\r\n    this.cue.points.push({\r\n      dwName: dwName,\r\n      dwPosition: pointData.dwPosition ? pointData.dwPosition : 0,\r\n      fccChunk: pointData.fccChunk ? pointData.fccChunk : 'data',\r\n      dwChunkStart: pointData.dwChunkStart ? pointData.dwChunkStart : 0,\r\n      dwBlockStart: pointData.dwBlockStart ? pointData.dwBlockStart : 0,\r\n      dwSampleOffset: pointData.dwSampleOffset\r\n    });\r\n    this.setLabl_(pointData, dwName);\r\n  }\r\n\r\n  /**\r\n   * Push a new cue point in this.cue.points according to existing cue points.\r\n   * @param {!Array} existingPoints Array with the existing points.\r\n   * @param {!Object} pointData A object with data of the cue point.\r\n   * @private\r\n   */\r\n  setCuePointInOrder_(existingPoints, pointData) {\r\n    /** @type {boolean} */\r\n    let hasSet = false;\r\n\r\n    // Iterate over the cue points that existed\r\n    // before this one was added\r\n    for (let i = 0; i < existingPoints.length; i++) {\r\n\r\n      // If the new point is located before this original point\r\n      // and the new point have not been created, create the\r\n      // new point and then the original point\r\n      if (existingPoints[i].dwSampleOffset > \r\n        pointData.dwSampleOffset && !hasSet) {\r\n        // create the new point\r\n        this.setCuePoint_(pointData, i + 1);\r\n\r\n        // create the original point\r\n        this.setCuePoint_(existingPoints[i], i + 2);\r\n        hasSet = true;\r\n\r\n      // Otherwise, re-create the original point\r\n      } else {\r\n        this.setCuePoint_(existingPoints[i], hasSet ? i + 2 : i + 1);\r\n      }\r\n    }\r\n    // If no point was created in the above loop,\r\n    // create the new point as the last one\r\n    if (!hasSet) {\r\n      this.setCuePoint_(pointData, this.cue.points.length + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear any LIST chunk labeled as 'adtl'.\r\n   * @private\r\n   */\r\n  clearLISTadtl_() {\r\n    for (let i = 0, len = this.LIST.length; i < len; i++) {\r\n      if (this.LIST[i].format == 'adtl') {\r\n        this.LIST.splice(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new 'labl' subchunk in a 'LIST' chunk of type 'adtl'.\r\n   * This method creates a LIST adtl chunk in the file if one\r\n   * is not present.\r\n   * @param {!Object} pointData A object with data of the cue point.\r\n   * @param {number} dwName The ID of the cue point.\r\n   * @private\r\n   */\r\n  setLabl_(pointData, dwName) {\r\n    /**\r\n     * Get the index of the LIST chunk labeled as adtl.\r\n     * A file can have many LIST chunks with unique labels.\r\n     * @type {?number}\r\n     */\r\n    let adtlIndex = this.getLISTIndex('adtl');\r\n    // If there is no adtl LIST, create one\r\n    if (adtlIndex === null) {\r\n      // Include a new item LIST chunk\r\n      this.LIST.push({\r\n        chunkId: 'LIST',\r\n        chunkSize: 4,\r\n        format: 'adtl',\r\n        subChunks: []});\r\n      // Get the index of the new LIST chunk\r\n      adtlIndex = this.LIST.length - 1;\r\n    }\r\n    this.setLabelText_(adtlIndex, pointData, dwName);\r\n    if (pointData.dwSampleLength) {\r\n      this.setLtxtChunk_(adtlIndex, pointData, dwName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new 'labl' subchunk in a 'LIST' chunk of type 'adtl'.\r\n   * @param {number} adtlIndex The index of the 'adtl' LIST in this.LIST.\r\n   * @param {!Object} pointData A object with data of the cue point.\r\n   * @param {number} dwName The ID of the cue point.\r\n   * @private\r\n   */\r\n  setLabelText_(adtlIndex, pointData, dwName) {\r\n    this.LIST[adtlIndex].subChunks.push({\r\n      chunkId: 'labl',\r\n      chunkSize: 4, // should be 4 + label length in bytes\r\n      dwName: dwName,\r\n      value: pointData.label\r\n    });\r\n    this.LIST[adtlIndex].chunkSize += 12; // should be 4 + label byte length\r\n  }\r\n  /**\r\n   * Create a new 'ltxt' subchunk in a 'LIST' chunk of type 'adtl'.\r\n   * @param {number} adtlIndex The index of the 'adtl' LIST in this.LIST.\r\n   * @param {!Object} pointData A object with data of the cue point.\r\n   * @param {number} dwName The ID of the cue point.\r\n   * @private\r\n   */\r\n  setLtxtChunk_(adtlIndex, pointData, dwName) {\r\n    this.LIST[adtlIndex].subChunks.push({\r\n      chunkId: 'ltxt',\r\n      chunkSize: 20,  // should be 12 + label byte length\r\n      dwName: dwName,\r\n      dwSampleLength: pointData.dwSampleLength,\r\n      dwPurposeID: pointData.dwPurposeID || 0,\r\n      dwCountry: pointData.dwCountry || 0,\r\n      dwLanguage: pointData.dwLanguage || 0,\r\n      dwDialect: pointData.dwDialect || 0,\r\n      dwCodePage: pointData.dwCodePage || 0,\r\n      value: pointData.label // kept for compatibility\r\n    });\r\n    this.LIST[adtlIndex].chunkSize += 28;\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFileTagEditor class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { WaveFileCreator } from './wavefile-creator';\r\n\r\n/**\r\n * A class to edit meta information in wav files.\r\n * @extends WaveFileCreator\r\n * @ignore\r\n */\r\nexport class WaveFileTagEditor extends WaveFileCreator {\r\n\r\n  /**\r\n   * Return the value of a RIFF tag in the INFO chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {?string} The value if the tag is found, null otherwise.\r\n   */\r\n  getTag(tag) {\r\n    /** @type {!Object} */\r\n    let index = this.getTagIndex_(tag);\r\n    if (index.TAG !== null) {\r\n      return this.LIST[index.LIST].subChunks[index.TAG].value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Write a RIFF tag in the INFO chunk. If the tag do not exist,\r\n   * then it is created. It if exists, it is overwritten.\r\n   * @param {string} tag The tag name.\r\n   * @param {string} value The tag value.\r\n   * @throws {Error} If the tag name is not valid.\r\n   */\r\n  setTag(tag, value) {\r\n    tag = fixRIFFTag_(tag);\r\n    /** @type {!Object} */\r\n    let index = this.getTagIndex_(tag);\r\n    if (index.TAG !== null) {\r\n      this.LIST[index.LIST].subChunks[index.TAG].chunkSize =\r\n        value.length + 1;\r\n      this.LIST[index.LIST].subChunks[index.TAG].value = value;\r\n    } else if (index.LIST !== null) {\r\n      this.LIST[index.LIST].subChunks.push({\r\n        chunkId: tag,\r\n        chunkSize: value.length + 1,\r\n        value: value});\r\n    } else {\r\n      this.LIST.push({\r\n        chunkId: 'LIST',\r\n        chunkSize: 8 + value.length + 1,\r\n        format: 'INFO',\r\n        subChunks: []});\r\n      this.LIST[this.LIST.length - 1].subChunks.push({\r\n        chunkId: tag,\r\n        chunkSize: value.length + 1,\r\n        value: value});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a RIFF tag from the INFO chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {boolean} True if a tag was deleted.\r\n   */\r\n  deleteTag(tag) {\r\n    /** @type {!Object} */\r\n    let index = this.getTagIndex_(tag);\r\n    if (index.TAG !== null) {\r\n      this.LIST[index.LIST].subChunks.splice(index.TAG, 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Return a Object<tag, value> with the RIFF tags in the file.\r\n   * @return {!Object<string, string>} The file tags.\r\n   */\r\n  listTags() {\r\n    /** @type {?number} */\r\n    let index = this.getLISTIndex('INFO');\r\n    /** @type {!Object} */\r\n    let tags = {};\r\n    if (index !== null) {\r\n      for (let i = 0, len = this.LIST[index].subChunks.length; i < len; i++) {\r\n        tags[this.LIST[index].subChunks[i].chunkId] =\r\n          this.LIST[index].subChunks[i].value;\r\n      }\r\n    }\r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Return the index of a list by its type.\r\n   * @param {string} listType The list type ('adtl', 'INFO')\r\n   * @return {?number}\r\n   * @protected\r\n   */\r\n  getLISTIndex(listType) {\r\n    for (let i = 0, len = this.LIST.length; i < len; i++) {\r\n      if (this.LIST[i].format == listType) {\r\n        return i;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Return the index of a tag in a FILE chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {!Object<string, ?number>}\r\n   *    Object.LIST is the INFO index in LIST\r\n   *    Object.TAG is the tag index in the INFO\r\n   * @private\r\n   */\r\n  getTagIndex_(tag) {\r\n    /** @type {!Object<string, ?number>} */\r\n    let index = {LIST: null, TAG: null};\r\n    for (let i = 0, len = this.LIST.length; i < len; i++) {\r\n      if (this.LIST[i].format == 'INFO') {\r\n        index.LIST = i;\r\n        for (let j=0, subLen = this.LIST[i].subChunks.length; j < subLen; j++) {\r\n          if (this.LIST[i].subChunks[j].chunkId == tag) {\r\n            index.TAG = j;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n}\r\n\r\n/**\r\n * Fix a RIFF tag format if possible, throw an error otherwise.\r\n * @param {string} tag The tag name.\r\n * @return {string} The tag name in proper fourCC format.\r\n * @private\r\n */\r\nfunction fixRIFFTag_(tag) {\r\n  if (tag.constructor !== String) {\r\n    throw new Error('Invalid tag name.');\r\n  } else if (tag.length < 4) {\r\n    for (let i = 0, len = 4 - tag.length; i < len; i++) {\r\n      tag += ' ';\r\n    }\r\n  }\r\n  return tag;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFileCreator class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { WaveFileParser } from './wavefile-parser';\r\nimport { interleave, deInterleave } from './parsers/interleave';\r\nimport { validateNumChannels } from './validators/validate-num-channels'; \r\nimport { validateSampleRate } from './validators/validate-sample-rate';\r\nimport { packArrayTo, unpackArrayTo, packTo, unpack } from './parsers/binary';\r\n\r\n/**\r\n * A class to read, write and create wav files.\r\n * @extends WaveFileParser\r\n * @ignore\r\n */\r\nexport class WaveFileCreator extends WaveFileParser {\r\n\r\n  constructor() {\r\n    super();\r\n    /**\r\n     * The bit depth code according to the samples.\r\n     * @type {string}\r\n     */\r\n    this.bitDepth = '0';\r\n    /**\r\n     * @type {!{bits: number, be: boolean}}\r\n     * @protected\r\n     */\r\n    this.dataType = {bits: 0, be: false};\r\n    /**\r\n     * Audio formats.\r\n     * Formats not listed here should be set to 65534,\r\n     * the code for WAVE_FORMAT_EXTENSIBLE\r\n     * @enum {number}\r\n     * @protected\r\n     */\r\n    this.WAV_AUDIO_FORMATS = {\r\n      '4': 17,\r\n      '8': 1,\r\n      '8a': 6,\r\n      '8m': 7,\r\n      '16': 1,\r\n      '24': 1,\r\n      '32': 1,\r\n      '32f': 3,\r\n      '64': 3\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set up the WaveFileCreator object based on the arguments passed.\r\n   * Existing chunks are reset.\r\n   * @param {number} numChannels The number of channels.\r\n   * @param {number} sampleRate The sample rate.\r\n   *    Integers like 8000, 44100, 48000, 96000, 192000.\r\n   * @param {string} bitDepthCode The audio bit depth code.\r\n   *    One of '4', '8', '8a', '8m', '16', '24', '32', '32f', '64'\r\n   *    or any value between '8' and '32' (like '12').\r\n   * @param {!(Array|TypedArray)} samples The samples.\r\n   * @param {Object=} options Optional. Used to force the container\r\n   *    as RIFX with {'container': 'RIFX'}\r\n   * @throws {Error} If any argument does not meet the criteria.\r\n   */\r\n  fromScratch(numChannels, sampleRate, bitDepthCode, samples, options) {\r\n    options = options || {};\r\n    // reset all chunks\r\n    this.clearHeaders();\r\n    this.newWavFile_(numChannels, sampleRate, bitDepthCode, samples, options);\r\n  }\r\n\r\n  /**\r\n   * Set up the WaveFileParser object from a byte buffer.\r\n   * @param {!Uint8Array} wavBuffer The buffer.\r\n   * @param {boolean=} [samples=true] True if the samples should be loaded.\r\n   * @throws {Error} If container is not RIFF, RIFX or RF64.\r\n   * @throws {Error} If format is not WAVE.\r\n   * @throws {Error} If no 'fmt ' chunk is found.\r\n   * @throws {Error} If no 'data' chunk is found.\r\n   */\r\n  fromBuffer(wavBuffer, samples=true) {\r\n    super.fromBuffer(wavBuffer, samples);\r\n    this.bitDepthFromFmt_();\r\n    this.updateDataType_();\r\n  }\r\n\r\n  /**\r\n   * Return a byte buffer representig the WaveFileParser object as a .wav file.\r\n   * The return value of this method can be written straight to disk.\r\n   * @return {!Uint8Array} A wav file.\r\n   * @throws {Error} If bit depth is invalid.\r\n   * @throws {Error} If the number of channels is invalid.\r\n   * @throws {Error} If the sample rate is invalid.\r\n   */\r\n  toBuffer() {\r\n    this.validateWavHeader_();\r\n    return super.toBuffer();\r\n  }\r\n\r\n  /**\r\n   * Return the samples packed in a Float64Array.\r\n   * @param {boolean=} [interleaved=false] True to return interleaved samples,\r\n   *   false to return the samples de-interleaved.\r\n   * @param {Function=} [OutputObject=Float64Array] The sample container.\r\n   * @return {!(Array|TypedArray)} the samples.\r\n   */\r\n  getSamples(interleaved=false, OutputObject=Float64Array) {\r\n    /**\r\n     * A Float64Array created with a size to match the\r\n     * the length of the samples.\r\n     * @type {!(Array|TypedArray)}\r\n     */\r\n    let samples = new OutputObject(\r\n      this.data.samples.length / (this.dataType.bits / 8));\r\n    // Unpack all the samples\r\n    unpackArrayTo(this.data.samples, this.dataType, samples,\r\n      0, this.data.samples.length);\r\n    if (!interleaved && this.fmt.numChannels > 1) {\r\n      return deInterleave(samples, this.fmt.numChannels, OutputObject);\r\n    }\r\n    return samples;\r\n  }\r\n\r\n  /**\r\n   * Return the sample at a given index.\r\n   * @param {number} index The sample index.\r\n   * @return {number} The sample.\r\n   * @throws {Error} If the sample index is off range.\r\n   */\r\n  getSample(index) {\r\n    index = index * (this.dataType.bits / 8);\r\n    if (index + this.dataType.bits / 8 > this.data.samples.length) {\r\n      throw new Error('Range error');\r\n    }\r\n    return unpack(\r\n      this.data.samples.slice(index, index + this.dataType.bits / 8),\r\n      this.dataType);\r\n  }\r\n\r\n  /**\r\n   * Set the sample at a given index.\r\n   * @param {number} index The sample index.\r\n   * @param {number} sample The sample.\r\n   * @throws {Error} If the sample index is off range.\r\n   */\r\n  setSample(index, sample) {\r\n    index = index * (this.dataType.bits / 8);\r\n    if (index + this.dataType.bits / 8 > this.data.samples.length) {\r\n      throw new Error('Range error');\r\n    }\r\n    packTo(sample, this.dataType, this.data.samples, index, true);\r\n  }\r\n\r\n  /**\r\n   * Return the value of the iXML chunk.\r\n   * @return {string} The contents of the iXML chunk.\r\n   */\r\n  getiXML() {\r\n    return this.iXML.value;\r\n  }\r\n\r\n  /**\r\n   * Set the value of the iXML chunk.\r\n   * @param {string} iXMLValue The value for the iXML chunk.\r\n   * @throws {TypeError} If the value is not a string.\r\n   */\r\n  setiXML(iXMLValue) {\r\n    if (typeof iXMLValue !== 'string') {\r\n      throw new TypeError('iXML value must be a string.');\r\n    }\r\n    this.iXML.value = iXMLValue;\r\n    this.iXML.chunkId = 'iXML';\r\n  }\r\n\r\n  /**\r\n   * Get the value of the _PMX chunk.\r\n   * @return {string} The contents of the _PMX chunk.\r\n   */\r\n  get_PMX() {\r\n    return this._PMX.value;\r\n  }\r\n\r\n  /**\r\n   * Set the value of the _PMX chunk.\r\n   * @param {string} _PMXValue The value for the _PMX chunk.\r\n   * @throws {TypeError} If the value is not a string.\r\n   */\r\n  set_PMX(_PMXValue) {\r\n    if (typeof _PMXValue !== 'string') {\r\n      throw new TypeError('_PMX value must be a string.');\r\n    }\r\n    this._PMX.value = _PMXValue;\r\n    this._PMX.chunkId = '_PMX';\r\n  }\r\n\r\n  /**\r\n   * Set up the WaveFileCreator object based on the arguments passed.\r\n   * @param {number} numChannels The number of channels.\r\n   * @param {number} sampleRate The sample rate.\r\n   *   Integers like 8000, 44100, 48000, 96000, 192000.\r\n   * @param {string} bitDepthCode The audio bit depth code.\r\n   *   One of '4', '8', '8a', '8m', '16', '24', '32', '32f', '64'\r\n   *   or any value between '8' and '32' (like '12').\r\n   * @param {!(Array|TypedArray)} samples The samples.\r\n   * @param {Object} options Used to define the container.\r\n   * @throws {Error} If any argument does not meet the criteria.\r\n   * @private\r\n   */\r\n  newWavFile_(numChannels, sampleRate, bitDepthCode, samples, options) {\r\n    if (!options.container) {\r\n      options.container = 'RIFF';\r\n    }\r\n    this.container = options.container;\r\n    this.bitDepth = bitDepthCode;\r\n    samples = interleave(samples);\r\n    this.updateDataType_();\r\n    /** @type {number} */\r\n    let numBytes = this.dataType.bits / 8;\r\n    this.data.samples = new Uint8Array(samples.length * numBytes);\r\n    packArrayTo(samples, this.dataType, this.data.samples, 0, true);\r\n    this.makeWavHeader_(\r\n      bitDepthCode, numChannels, sampleRate,\r\n      numBytes, this.data.samples.length, options);\r\n    this.data.chunkId = 'data';\r\n    this.data.chunkSize = this.data.samples.length;\r\n    this.validateWavHeader_();\r\n  }\r\n\r\n  /**\r\n   * Define the header of a wav file.\r\n   * @param {string} bitDepthCode The audio bit depth\r\n   * @param {number} numChannels The number of channels\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} numBytes The number of bytes each sample use.\r\n   * @param {number} samplesLength The length of the samples in bytes.\r\n   * @param {!Object} options The extra options, like container defintion.\r\n   * @private\r\n   */\r\n  makeWavHeader_(\r\n    bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\r\n    if (bitDepthCode == '4') {\r\n      this.createADPCMHeader_(\r\n        bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options);\r\n\r\n    } else if (bitDepthCode == '8a' || bitDepthCode == '8m') {\r\n      this.createALawMulawHeader_(\r\n        bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options);\r\n\r\n    } else if(Object.keys(this.WAV_AUDIO_FORMATS).indexOf(bitDepthCode) == -1 ||\r\n        numChannels > 2) {\r\n      this.createExtensibleHeader_(\r\n        bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options);\r\n\r\n    } else {\r\n      this.createPCMHeader_(\r\n        bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options);      \r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the header of a linear PCM wave file.\r\n   * @param {string} bitDepthCode The audio bit depth\r\n   * @param {number} numChannels The number of channels\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} numBytes The number of bytes each sample use.\r\n   * @param {number} samplesLength The length of the samples in bytes.\r\n   * @param {!Object} options The extra options, like container defintion.\r\n   * @private\r\n   */\r\n  createPCMHeader_(\r\n    bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\r\n    this.container = options.container;\r\n    this.chunkSize = 36 + samplesLength;\r\n    this.format = 'WAVE';\r\n    this.bitDepth = bitDepthCode;\r\n    this.fmt = {\r\n      chunkId: 'fmt ',\r\n      chunkSize: 16,\r\n      audioFormat: this.WAV_AUDIO_FORMATS[bitDepthCode] || 65534,\r\n      numChannels: numChannels,\r\n      sampleRate: sampleRate,\r\n      byteRate: (numChannels * numBytes) * sampleRate,\r\n      blockAlign: numChannels * numBytes,\r\n      bitsPerSample: parseInt(bitDepthCode, 10),\r\n      cbSize: 0,\r\n      validBitsPerSample: 0,\r\n      dwChannelMask: 0,\r\n      subformat: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create the header of a ADPCM wave file.\r\n   * @param {string} bitDepthCode The audio bit depth\r\n   * @param {number} numChannels The number of channels\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} numBytes The number of bytes each sample use.\r\n   * @param {number} samplesLength The length of the samples in bytes.\r\n   * @param {!Object} options The extra options, like container defintion.\r\n   * @private\r\n   */\r\n  createADPCMHeader_(\r\n    bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\r\n    this.createPCMHeader_(\r\n      bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options);\r\n    this.chunkSize = 40 + samplesLength;\r\n    this.fmt.chunkSize = 20;\r\n    this.fmt.byteRate = 4055;\r\n    this.fmt.blockAlign = 256;\r\n    this.fmt.bitsPerSample = 4;\r\n    this.fmt.cbSize = 2;\r\n    this.fmt.validBitsPerSample = 505;\r\n    this.fact = {\r\n      chunkId: 'fact',\r\n      chunkSize: 4,\r\n      dwSampleLength: samplesLength * 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create the header of WAVE_FORMAT_EXTENSIBLE file.\r\n   * @param {string} bitDepthCode The audio bit depth\r\n   * @param {number} numChannels The number of channels\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} numBytes The number of bytes each sample use.\r\n   * @param {number} samplesLength The length of the samples in bytes.\r\n   * @param {!Object} options The extra options, like container defintion.\r\n   * @private\r\n   */\r\n  createExtensibleHeader_(\r\n      bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\r\n    this.createPCMHeader_(\r\n      bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options);\r\n    this.chunkSize = 36 + 24 + samplesLength;\r\n    this.fmt.chunkSize = 40;\r\n    this.fmt.bitsPerSample = ((parseInt(bitDepthCode, 10) - 1) | 7) + 1;\r\n    this.fmt.cbSize = 22;\r\n    this.fmt.validBitsPerSample = parseInt(bitDepthCode, 10);\r\n    this.fmt.dwChannelMask = dwChannelMask_(numChannels);\r\n    // subformat 128-bit GUID as 4 32-bit values\r\n    // only supports uncompressed integer PCM samples\r\n    this.fmt.subformat = [1, 1048576, 2852126848, 1905997824];\r\n  }\r\n\r\n  /**\r\n   * Create the header of mu-Law and A-Law wave files.\r\n   * @param {string} bitDepthCode The audio bit depth\r\n   * @param {number} numChannels The number of channels\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} numBytes The number of bytes each sample use.\r\n   * @param {number} samplesLength The length of the samples in bytes.\r\n   * @param {!Object} options The extra options, like container defintion.\r\n   * @private\r\n   */\r\n  createALawMulawHeader_(\r\n      bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\r\n    this.createPCMHeader_(\r\n      bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options);\r\n    this.chunkSize = 40 + samplesLength;\r\n    this.fmt.chunkSize = 20;\r\n    this.fmt.cbSize = 2;\r\n    this.fmt.validBitsPerSample = 8;\r\n    this.fact = {\r\n      chunkId: 'fact',\r\n      chunkSize: 4,\r\n      dwSampleLength: samplesLength\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set the string code of the bit depth based on the 'fmt ' chunk.\r\n   * @private\r\n   */\r\n  bitDepthFromFmt_() {\r\n    if (this.fmt.audioFormat === 3 && this.fmt.bitsPerSample === 32) {\r\n      this.bitDepth = '32f';\r\n    } else if (this.fmt.audioFormat === 6) {\r\n      this.bitDepth = '8a';\r\n    } else if (this.fmt.audioFormat === 7) {\r\n      this.bitDepth = '8m';\r\n    } else {\r\n      this.bitDepth = this.fmt.bitsPerSample.toString();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate the bit depth.\r\n   * @return {boolean} True is the bit depth is valid.\r\n   * @throws {Error} If bit depth is invalid.\r\n   * @private\r\n   */\r\n  validateBitDepth_() {\r\n    if (!this.WAV_AUDIO_FORMATS[this.bitDepth]) {\r\n      if (parseInt(this.bitDepth, 10) > 8 &&\r\n          parseInt(this.bitDepth, 10) < 54) {\r\n        return true;\r\n      }\r\n      throw new Error('Invalid bit depth.');\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Update the type definition used to read and write the samples.\r\n   * @private\r\n   */\r\n  updateDataType_() {\r\n    this.dataType = {\r\n      bits: ((parseInt(this.bitDepth, 10) - 1) | 7) + 1,\r\n      fp: this.bitDepth == '32f' || this.bitDepth == '64',\r\n      signed: this.bitDepth != '8',\r\n      be: this.container == 'RIFX'\r\n    };\r\n    if (['4', '8a', '8m'].indexOf(this.bitDepth) > -1 ) {\r\n      this.dataType.bits = 8;\r\n      this.dataType.signed = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate the header of the file.\r\n   * @throws {Error} If bit depth is invalid.\r\n   * @throws {Error} If the number of channels is invalid.\r\n   * @throws {Error} If the sample rate is invalid.\r\n   * @ignore\r\n   * @private\r\n   */\r\n  validateWavHeader_() {\r\n    this.validateBitDepth_();\r\n    if (!validateNumChannels(this.fmt.numChannels, this.fmt.bitsPerSample)) {\r\n      throw new Error('Invalid number of channels.');\r\n    }\r\n    if (!validateSampleRate(\r\n        this.fmt.numChannels, this.fmt.bitsPerSample, this.fmt.sampleRate)) {\r\n      throw new Error('Invalid sample rate.');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Return the value for dwChannelMask according to the number of channels.\r\n * @param {number} numChannels the number of channels.\r\n * @return {number} the dwChannelMask value.\r\n * @private\r\n */\r\nfunction dwChannelMask_(numChannels) {\r\n  /** @type {number} */\r\n  let mask = 0;\r\n  // mono = FC\r\n  if (numChannels === 1) {\r\n    mask = 0x4;\r\n  // stereo = FL, FR\r\n  } else if (numChannels === 2) {\r\n    mask = 0x3;\r\n  // quad = FL, FR, BL, BR\r\n  } else if (numChannels === 4) {\r\n    mask = 0x33;\r\n  // 5.1 = FL, FR, FC, LF, BL, BR\r\n  } else if (numChannels === 6) {\r\n    mask = 0x3F;\r\n  // 7.1 = FL, FR, FC, LF, BL, BR, SL, SR\r\n  } else if (numChannels === 8) {\r\n    mask = 0x63F;\r\n  }\r\n  return mask;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The validateNumChannels function.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/**\r\n * Validate the number of channels in a wav file according to the\r\n * bit depth of the audio.\r\n * @param {number} channels The number of channels in the file.\r\n * @param {number} bits The number of bits per sample.\r\n * @return {boolean} True is the number of channels is valid.\r\n */\r\nexport function validateNumChannels(channels, bits) {\r\n  /** @type {number} */\r\n  let blockAlign = channels * bits / 8;\r\n  if (channels < 1 || blockAlign > 65535) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFileParser class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { WaveFileReader } from './wavefile-reader';\r\nimport { writeString } from './parsers/write-string';\r\nimport { packTo, packStringTo, packString, pack } from './parsers/binary';\r\n\r\n/**\r\n * A class to read and write wav files.\r\n * @extends WaveFileReader\r\n */\r\nexport class WaveFileParser extends WaveFileReader {\r\n\r\n  /**\r\n   * Return a byte buffer representig the WaveFileParser object as a .wav file.\r\n   * The return value of this method can be written straight to disk.\r\n   * @return {!Uint8Array} A wav file.\r\n   */\r\n  toBuffer() {\r\n    this.uInt16.be = this.container === 'RIFX';\r\n    this.uInt32.be = this.uInt16.be;\r\n    /** @type {!Array<!Array<number>>} */\r\n    let fileBody = [\r\n      this.getJunkBytes_(),\r\n      this.getDs64Bytes_(),\r\n      this.getBextBytes_(),\r\n      this.getiXMLBytes_(),\r\n      this.getFmtBytes_(),\r\n      this.getFactBytes_(),\r\n      packString(this.data.chunkId),\r\n      pack(this.data.samples.length, this.uInt32),\r\n      this.data.samples,\r\n      this.getCueBytes_(),\r\n      this.getSmplBytes_(),\r\n      this.getLISTBytes_(),\r\n      this.get_PMXBytes_()\r\n    ];\r\n    /** @type {number} */\r\n    let fileBodyLength = 0;\r\n    for (let i=0; i<fileBody.length; i++) {\r\n      fileBodyLength += fileBody[i].length;\r\n    }\r\n    /** @type {!Uint8Array} */\r\n    let file = new Uint8Array(fileBodyLength + 12);\r\n    /** @type {number} */\r\n    let index = 0;\r\n    index = packStringTo(this.container, file, index);\r\n    index = packTo(fileBodyLength + 4, this.uInt32, file, index);\r\n    index = packStringTo(this.format, file, index);\r\n    for (let i=0; i<fileBody.length; i++) {\r\n      file.set(fileBody[i], index);\r\n      index += fileBody[i].length;\r\n    }\r\n    return file;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'bext' chunk.\r\n   * @private\r\n   */\r\n  getBextBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    this.enforceBext_();\r\n    if (this.bext.chunkId) {\r\n      this.bext.chunkSize = 602 + this.bext.codingHistory.length;\r\n      bytes = bytes.concat(\r\n        packString(this.bext.chunkId),\r\n        pack(602 + this.bext.codingHistory.length, this.uInt32),\r\n        writeString(this.bext.description, 256),\r\n        writeString(this.bext.originator, 32),\r\n        writeString(this.bext.originatorReference, 32),\r\n        writeString(this.bext.originationDate, 10),\r\n        writeString(this.bext.originationTime, 8),\r\n        pack(this.bext.timeReference[0], this.uInt32),\r\n        pack(this.bext.timeReference[1], this.uInt32),\r\n        pack(this.bext.version, this.uInt16),\r\n        writeString(this.bext.UMID, 64),\r\n        pack(this.bext.loudnessValue, this.uInt16),\r\n        pack(this.bext.loudnessRange, this.uInt16),\r\n        pack(this.bext.maxTruePeakLevel, this.uInt16),\r\n        pack(this.bext.maxMomentaryLoudness, this.uInt16),\r\n        pack(this.bext.maxShortTermLoudness, this.uInt16),\r\n        writeString(this.bext.reserved, 180),\r\n        writeString(\r\n          this.bext.codingHistory, this.bext.codingHistory.length));\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Make sure a 'bext' chunk is created if BWF data was created in a file.\r\n   * @private\r\n   */\r\n  enforceBext_() {\r\n    for (let prop in this.bext) {\r\n      if (this.bext.hasOwnProperty(prop)) {\r\n        if (this.bext[prop] && prop != 'timeReference') {\r\n          this.bext.chunkId = 'bext';\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (this.bext.timeReference[0] || this.bext.timeReference[1]) {\r\n      this.bext.chunkId = 'bext';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'iXML' chunk.\r\n   * @return {!Array<number>} The 'iXML' chunk bytes.\r\n   * @private\r\n   */\r\n  getiXMLBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (this.iXML.chunkId) {\r\n      /** @type {!Array<number>} */\r\n      let iXMLPackedValue = packString(this.iXML.value);\r\n      this.iXML.chunkSize = iXMLPackedValue.length;\r\n      bytes = bytes.concat(\r\n        packString(this.iXML.chunkId),\r\n        pack(this.iXML.chunkSize, this.uInt32),\r\n        iXMLPackedValue);\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'ds64' chunk.\r\n   * @return {!Array<number>} The 'ds64' chunk bytes.\r\n   * @private\r\n   */\r\n  getDs64Bytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (this.ds64.chunkId) {\r\n      bytes = bytes.concat(\r\n        packString(this.ds64.chunkId),\r\n        pack(this.ds64.chunkSize, this.uInt32),\r\n        pack(this.ds64.riffSizeHigh, this.uInt32),\r\n        pack(this.ds64.riffSizeLow, this.uInt32),\r\n        pack(this.ds64.dataSizeHigh, this.uInt32),\r\n        pack(this.ds64.dataSizeLow, this.uInt32),\r\n        pack(this.ds64.originationTime, this.uInt32),\r\n        pack(this.ds64.sampleCountHigh, this.uInt32),\r\n        pack(this.ds64.sampleCountLow, this.uInt32));\r\n    }\r\n    //if (this.ds64.tableLength) {\r\n    //  ds64Bytes = ds64Bytes.concat(\r\n    //    pack(this.ds64.tableLength, this.uInt32),\r\n    //    this.ds64.table);\r\n    //}\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'cue ' chunk.\r\n   * @return {!Array<number>} The 'cue ' chunk bytes.\r\n   * @private\r\n   */\r\n  getCueBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (this.cue.chunkId) {\r\n      /** @type {!Array<number>} */\r\n      let cuePointsBytes = this.getCuePointsBytes_();\r\n      bytes = bytes.concat(\r\n        packString(this.cue.chunkId),\r\n        pack(cuePointsBytes.length + 4, this.uInt32), // chunkSize\r\n        pack(this.cue.dwCuePoints, this.uInt32),\r\n        cuePointsBytes);\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'cue ' points.\r\n   * @return {!Array<number>} The 'cue ' points as an array of bytes.\r\n   * @private\r\n   */\r\n  getCuePointsBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let points = [];\r\n    for (let i=0; i<this.cue.dwCuePoints; i++) {\r\n      points = points.concat(\r\n        pack(this.cue.points[i].dwName, this.uInt32),\r\n        pack(this.cue.points[i].dwPosition, this.uInt32),\r\n        packString(this.cue.points[i].fccChunk),\r\n        pack(this.cue.points[i].dwChunkStart, this.uInt32),\r\n        pack(this.cue.points[i].dwBlockStart, this.uInt32),\r\n        pack(this.cue.points[i].dwSampleOffset, this.uInt32));\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'smpl' chunk.\r\n   * @return {!Array<number>} The 'smpl' chunk bytes.\r\n   * @private\r\n   */\r\n  getSmplBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (this.smpl.chunkId) {\r\n      /** @type {!Array<number>} */\r\n      let smplLoopsBytes = this.getSmplLoopsBytes_();\r\n      bytes = bytes.concat(\r\n        packString(this.smpl.chunkId),\r\n        pack(smplLoopsBytes.length + 36, this.uInt32), //chunkSize\r\n        pack(this.smpl.dwManufacturer, this.uInt32),\r\n        pack(this.smpl.dwProduct, this.uInt32),\r\n        pack(this.smpl.dwSamplePeriod, this.uInt32),\r\n        pack(this.smpl.dwMIDIUnityNote, this.uInt32),\r\n        pack(this.smpl.dwMIDIPitchFraction, this.uInt32),\r\n        pack(this.smpl.dwSMPTEFormat, this.uInt32),\r\n        pack(this.smpl.dwSMPTEOffset, this.uInt32),\r\n        pack(this.smpl.dwNumSampleLoops, this.uInt32),\r\n        pack(this.smpl.dwSamplerData, this.uInt32),\r\n        smplLoopsBytes);\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'smpl' loops.\r\n   * @return {!Array<number>} The 'smpl' loops as an array of bytes.\r\n   * @private\r\n   */\r\n  getSmplLoopsBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let loops = [];\r\n    for (let i=0; i<this.smpl.dwNumSampleLoops; i++) {\r\n      loops = loops.concat(\r\n        pack(this.smpl.loops[i].dwName, this.uInt32),\r\n        pack(this.smpl.loops[i].dwType, this.uInt32),\r\n        pack(this.smpl.loops[i].dwStart, this.uInt32),\r\n        pack(this.smpl.loops[i].dwEnd, this.uInt32),\r\n        pack(this.smpl.loops[i].dwFraction, this.uInt32),\r\n        pack(this.smpl.loops[i].dwPlayCount, this.uInt32));\r\n    }\r\n    return loops;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'fact' chunk.\r\n   * @return {!Array<number>} The 'fact' chunk bytes.\r\n   * @private\r\n   */\r\n  getFactBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (this.fact.chunkId) {\r\n      bytes = bytes.concat(\r\n        packString(this.fact.chunkId),\r\n        pack(this.fact.chunkSize, this.uInt32),\r\n        pack(this.fact.dwSampleLength, this.uInt32));\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'fmt ' chunk.\r\n   * @return {!Array<number>} The 'fmt' chunk bytes.\r\n   * @throws {Error} if no 'fmt ' chunk is present.\r\n   * @private\r\n   */\r\n  getFmtBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let fmtBytes = [];\r\n    if (this.fmt.chunkId) {\r\n      /** @type {!Array<number>} */\r\n      let bytes  = fmtBytes.concat(\r\n        packString(this.fmt.chunkId),\r\n        pack(this.fmt.chunkSize, this.uInt32),\r\n        pack(this.fmt.audioFormat, this.uInt16),\r\n        pack(this.fmt.numChannels, this.uInt16),\r\n        pack(this.fmt.sampleRate, this.uInt32),\r\n        pack(this.fmt.byteRate, this.uInt32),\r\n        pack(this.fmt.blockAlign, this.uInt16),\r\n        pack(this.fmt.bitsPerSample, this.uInt16),\r\n        this.getFmtExtensionBytes_());\r\n      this.enforceByteLen_(bytes);\r\n      return bytes;\r\n    }\r\n    throw Error('Could not find the \"fmt \" chunk');\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the fmt extension fields.\r\n   * @return {!Array<number>} The fmt extension bytes.\r\n   * @private\r\n   */\r\n  getFmtExtensionBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let extension = [];\r\n    if (this.fmt.chunkSize > 16) {\r\n      extension = extension.concat(\r\n        pack(this.fmt.cbSize, this.uInt16));\r\n    }\r\n    if (this.fmt.chunkSize > 18) {\r\n      extension = extension.concat(\r\n        pack(this.fmt.validBitsPerSample, this.uInt16));\r\n    }\r\n    if (this.fmt.chunkSize > 20) {\r\n      extension = extension.concat(\r\n        pack(this.fmt.dwChannelMask, this.uInt32));\r\n    }\r\n    if (this.fmt.chunkSize > 24) {\r\n      extension = extension.concat(\r\n        pack(this.fmt.subformat[0], this.uInt32),\r\n        pack(this.fmt.subformat[1], this.uInt32),\r\n        pack(this.fmt.subformat[2], this.uInt32),\r\n        pack(this.fmt.subformat[3], this.uInt32));\r\n    }\r\n    return extension;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'LIST' chunk.\r\n   * @return {!Array<number>} The 'LIST' chunk bytes.\r\n   * @private\r\n   */\r\n  getLISTBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    for (let i=0; i<this.LIST.length; i++) {\r\n      /** @type {!Array<number>} */\r\n      let subChunksBytes = this.getLISTSubChunksBytes_(\r\n          this.LIST[i].subChunks, this.LIST[i].format);\r\n      bytes = bytes.concat(\r\n        packString(this.LIST[i].chunkId),\r\n        pack(subChunksBytes.length + 4, this.uInt32), //chunkSize\r\n        packString(this.LIST[i].format),\r\n        subChunksBytes);\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the sub chunks of a 'LIST' chunk.\r\n   * @param {!Array<!Object>} subChunks The 'LIST' sub chunks.\r\n   * @param {string} format The format of the 'LIST' chunk.\r\n   *    Currently supported values are 'adtl' or 'INFO'.\r\n   * @return {!Array<number>} The sub chunk bytes.\r\n   * @private\r\n   */\r\n  getLISTSubChunksBytes_(subChunks, format) {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    for (let i = 0, len = subChunks.length; i < len; i++) {\r\n      if (format == 'INFO') {\r\n        bytes = bytes.concat(this.getLISTINFOSubChunksBytes_(subChunks[i]));\r\n      } else if (format == 'adtl') {\r\n        bytes = bytes.concat(this.getLISTadtlSubChunksBytes_(subChunks[i]));\r\n      }\r\n      this.enforceByteLen_(bytes);\r\n    }\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the sub chunks of a 'LIST' chunk of type 'INFO'.\r\n   * @param {!Object} subChunk The 'LIST' sub chunk.\r\n   * @return {!Array<number>}\r\n   * @private\r\n   */\r\n  getLISTINFOSubChunksBytes_(subChunk) {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    /** @type {!Array<number>} */\r\n    let LISTsubChunkValue = writeString(\r\n        subChunk.value, subChunk.value.length);\r\n    bytes = bytes.concat(\r\n      packString(subChunk.chunkId),\r\n      pack(LISTsubChunkValue.length + 1, this.uInt32), //chunkSize\r\n      LISTsubChunkValue);\r\n    bytes.push(0);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the sub chunks of a 'LIST' chunk of type 'INFO'.\r\n   * @param {!Object} subChunk The 'LIST' sub chunk.\r\n   * @return {!Array<number>}\r\n   * @private\r\n   */\r\n  getLISTadtlSubChunksBytes_(subChunk) {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (['labl', 'note'].indexOf(subChunk.chunkId) > -1) {\r\n      /** @type {!Array<number>} */\r\n      let LISTsubChunkValue = writeString(\r\n          subChunk.value,\r\n          subChunk.value.length);\r\n      bytes = bytes.concat(\r\n        packString(subChunk.chunkId),\r\n        pack(LISTsubChunkValue.length + 4 + 1, this.uInt32), //chunkSize\r\n        pack(subChunk.dwName, this.uInt32),\r\n        LISTsubChunkValue);\r\n      bytes.push(0);\r\n    } else if (subChunk.chunkId == 'ltxt') {\r\n      bytes = bytes.concat(\r\n        this.getLtxtChunkBytes_(subChunk));\r\n    }\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of a 'ltxt' chunk.\r\n   * @param {!Object} ltxt the 'ltxt' chunk.\r\n   * @return {!Array<number>}\r\n   * @private\r\n   */\r\n  getLtxtChunkBytes_(ltxt) {\r\n    return [].concat(\r\n      packString(ltxt.chunkId),\r\n      pack(ltxt.value.length + 20, this.uInt32),\r\n      pack(ltxt.dwName, this.uInt32),\r\n      pack(ltxt.dwSampleLength, this.uInt32),\r\n      pack(ltxt.dwPurposeID, this.uInt32),\r\n      pack(ltxt.dwCountry, this.uInt16),\r\n      pack(ltxt.dwLanguage, this.uInt16),\r\n      pack(ltxt.dwDialect, this.uInt16),\r\n      pack(ltxt.dwCodePage, this.uInt16),\r\n       // should always be a empty string;\r\n       // kept for compatibility\r\n      writeString(ltxt.value, ltxt.value.length));\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the '_PMX' chunk.\r\n   * @return {!Array<number>} The '_PMX' chunk bytes.\r\n   * @private\r\n   */\r\n  get_PMXBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (this._PMX.chunkId) {\r\n      /** @type {!Array<number>} */\r\n      let _PMXPackedValue = packString(this._PMX.value);\r\n      this._PMX.chunkSize = _PMXPackedValue.length;\r\n      bytes = bytes.concat(\r\n        packString(this._PMX.chunkId),\r\n        pack(this._PMX.chunkSize, this.uInt32),\r\n        _PMXPackedValue);\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Return the bytes of the 'junk' chunk.\r\n   * @private\r\n   */\r\n  getJunkBytes_() {\r\n    /** @type {!Array<number>} */\r\n    let bytes = [];\r\n    if (this.junk.chunkId) {\r\n      return bytes.concat(\r\n        packString(this.junk.chunkId),\r\n        pack(this.junk.chunkData.length, this.uInt32), //chunkSize\r\n        this.junk.chunkData);\r\n    }\r\n    this.enforceByteLen_(bytes);\r\n    return bytes;\r\n  }\r\n\r\n  /**\r\n   * Push a null byte into a byte array if\r\n   * the byte count is odd.\r\n   * @param {!Array<number>} bytes The byte array.\r\n   * @private\r\n   */\r\n  enforceByteLen_(bytes) {\r\n    if (bytes.length % 2) {\r\n      bytes.push(0);\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFileReader class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { RIFFFile } from './riff-file';\r\nimport { unpackString, unpack } from './parsers/binary';\r\n\r\n/**\r\n * A class to read wav files.\r\n * @extends RIFFFile\r\n */\r\nexport class WaveFileReader extends RIFFFile {\r\n\r\n  constructor() {\r\n    super();\r\n    // Include 'RF64' as a supported container format\r\n    this.supported_containers.push('RF64');\r\n    /**\r\n     * The data of the 'fmt' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.fmt = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {number} */\r\n      audioFormat: 0,\r\n      /** @type {number} */\r\n      numChannels: 0,\r\n      /** @type {number} */\r\n      sampleRate: 0,\r\n      /** @type {number} */\r\n      byteRate: 0,\r\n      /** @type {number} */\r\n      blockAlign: 0,\r\n      /** @type {number} */\r\n      bitsPerSample: 0,\r\n      /** @type {number} */\r\n      cbSize: 0,\r\n      /** @type {number} */\r\n      validBitsPerSample: 0,\r\n      /** @type {number} */\r\n      dwChannelMask: 0,\r\n      /**\r\n       * 4 32-bit values representing a 128-bit ID\r\n       * @type {!Array<number>}\r\n       */\r\n      subformat: []\r\n    };\r\n    /**\r\n     * The data of the 'fact' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.fact = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {number} */\r\n      dwSampleLength: 0\r\n    };\r\n    /**\r\n     * The data of the 'cue ' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.cue = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {number} */\r\n      dwCuePoints: 0,\r\n      /** @type {!Array<!Object>} */\r\n      points: [],\r\n    };\r\n    /**\r\n     * The data of the 'smpl' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.smpl = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {number} */\r\n      dwManufacturer: 0,\r\n      /** @type {number} */\r\n      dwProduct: 0,\r\n      /** @type {number} */\r\n      dwSamplePeriod: 0,\r\n      /** @type {number} */\r\n      dwMIDIUnityNote: 0,\r\n      /** @type {number} */\r\n      dwMIDIPitchFraction: 0,\r\n      /** @type {number} */\r\n      dwSMPTEFormat: 0,\r\n      /** @type {number} */\r\n      dwSMPTEOffset: 0,\r\n      /** @type {number} */\r\n      dwNumSampleLoops: 0,\r\n      /** @type {number} */\r\n      dwSamplerData: 0,\r\n      /** @type {!Array<!Object>} */\r\n      loops: []\r\n    };\r\n    /**\r\n     * The data of the 'bext' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.bext = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {string} */\r\n      description: '', //256\r\n      /** @type {string} */\r\n      originator: '', //32\r\n      /** @type {string} */\r\n      originatorReference: '', //32\r\n      /** @type {string} */\r\n      originationDate: '', //10\r\n      /** @type {string} */\r\n      originationTime: '', //8\r\n      /**\r\n       * 2 32-bit values, timeReference high and low\r\n       * @type {!Array<number>}\r\n       */\r\n      timeReference: [0, 0],\r\n      /** @type {number} */\r\n      version: 0, //WORD\r\n      /** @type {string} */\r\n      UMID: '', // 64 chars\r\n      /** @type {number} */\r\n      loudnessValue: 0, //WORD\r\n      /** @type {number} */\r\n      loudnessRange: 0, //WORD\r\n      /** @type {number} */\r\n      maxTruePeakLevel: 0, //WORD\r\n      /** @type {number} */\r\n      maxMomentaryLoudness: 0, //WORD\r\n      /** @type {number} */\r\n      maxShortTermLoudness: 0, //WORD\r\n      /** @type {string} */\r\n      reserved: '', //180\r\n      /** @type {string} */\r\n      codingHistory: '' // string, unlimited\r\n    };\r\n    /**\r\n     * The data of the 'iXML' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.iXML = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {string} */\r\n      value: ''\r\n    };\r\n    /**\r\n     * The data of the 'ds64' chunk.\r\n     * Used only with RF64 files.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.ds64 = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {number} */\r\n      riffSizeHigh: 0, // DWORD\r\n      /** @type {number} */\r\n      riffSizeLow: 0, // DWORD\r\n      /** @type {number} */\r\n      dataSizeHigh: 0, // DWORD\r\n      /** @type {number} */\r\n      dataSizeLow: 0, // DWORD\r\n      /** @type {number} */\r\n      originationTime: 0, // DWORD\r\n      /** @type {number} */\r\n      sampleCountHigh: 0, // DWORD\r\n      /** @type {number} */\r\n      sampleCountLow: 0 // DWORD\r\n      /** @type {number} */\r\n      //'tableLength': 0, // DWORD\r\n      /** @type {!Array<number>} */\r\n      //'table': []\r\n    };\r\n    /**\r\n     * The data of the 'data' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.data = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {!Uint8Array} */\r\n      samples: new Uint8Array(0)\r\n    };\r\n    /**\r\n     * The data of the 'LIST' chunks.\r\n     * Each item in this list look like this:\r\n     *  {\r\n     *      chunkId: '',\r\n     *      chunkSize: 0,\r\n     *      format: '',\r\n     *      subChunks: []\r\n     *   }\r\n     * @type {!Array<!Object>}\r\n     */\r\n    this.LIST = [];\r\n    /**\r\n     * The data of the 'junk' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this.junk = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {!Array<number>} */\r\n      chunkData: []\r\n    };\r\n    /**\r\n     * The data of the '_PMX' chunk.\r\n     * @type {!Object<string, *>}\r\n     */\r\n    this._PMX = {\r\n      /** @type {string} */\r\n      chunkId: '',\r\n      /** @type {number} */\r\n      chunkSize: 0,\r\n      /** @type {string} */\r\n      value: ''\r\n    };\r\n    /**\r\n     * @type {{be: boolean, bits: number, fp: boolean, signed: boolean}}\r\n     * @protected\r\n     */\r\n    this.uInt16 = {bits: 16, be: false, signed: false, fp: false};\r\n  }\r\n\r\n  /**\r\n   * Set up the WaveFileReader object from a byte buffer.\r\n   * @param {!Uint8Array} wavBuffer The buffer.\r\n   * @param {boolean=} [samples=true] True if the samples should be loaded.\r\n   * @throws {Error} If container is not RIFF, RIFX or RF64.\r\n   * @throws {Error} If format is not WAVE.\r\n   * @throws {Error} If no 'fmt ' chunk is found.\r\n   * @throws {Error} If no 'data' chunk is found.\r\n   */\r\n  fromBuffer(wavBuffer, samples=true) {\r\n    // Always should reset the chunks when reading from a buffer\r\n    this.clearHeaders();\r\n    this.setSignature(wavBuffer);\r\n    this.uInt16.be = this.uInt32.be;\r\n    if (this.format != 'WAVE') {\r\n      throw Error('Could not find the \"WAVE\" format identifier');\r\n    }\r\n    this.readDs64Chunk_(wavBuffer);\r\n    this.readFmtChunk_(wavBuffer);\r\n    this.readFactChunk_(wavBuffer);\r\n    this.readBextChunk_(wavBuffer);\r\n    this.readiXMLChunk_(wavBuffer);\r\n    this.readCueChunk_(wavBuffer);\r\n    this.readSmplChunk_(wavBuffer);\r\n    this.readDataChunk_(wavBuffer, samples);\r\n    this.readJunkChunk_(wavBuffer);\r\n    this.readLISTChunk_(wavBuffer);\r\n    this.read_PMXChunk_(wavBuffer);\r\n  }\r\n\r\n  /**\r\n   * Reset the chunks of the WaveFileReader instance.\r\n   * @protected\r\n   * @ignore\r\n   */\r\n  clearHeaders() {\r\n    /** @type {!Object} */\r\n    let tmpWav = new WaveFileReader();\r\n    Object.assign(this.fmt, tmpWav.fmt);\r\n    Object.assign(this.fact, tmpWav.fact);\r\n    Object.assign(this.cue, tmpWav.cue);\r\n    Object.assign(this.smpl, tmpWav.smpl);\r\n    Object.assign(this.bext, tmpWav.bext);\r\n    Object.assign(this.iXML, tmpWav.iXML);\r\n    Object.assign(this.ds64, tmpWav.ds64);\r\n    Object.assign(this.data, tmpWav.data);\r\n    this.LIST = [];\r\n    Object.assign(this.junk, tmpWav.junk);\r\n    Object.assign(this._PMX, tmpWav._PMX);\r\n  }\r\n  \r\n  /**\r\n   * Read the 'fmt ' chunk of a wave file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @throws {Error} If no 'fmt ' chunk is found.\r\n   * @private\r\n   */\r\n  readFmtChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('fmt ');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this.fmt.chunkId = chunk.chunkId;\r\n      this.fmt.chunkSize = chunk.chunkSize;\r\n      this.fmt.audioFormat = this.readUInt16_(buffer);\r\n      this.fmt.numChannels = this.readUInt16_(buffer);\r\n      this.fmt.sampleRate = this.readUInt32(buffer);\r\n      this.fmt.byteRate = this.readUInt32(buffer);\r\n      this.fmt.blockAlign = this.readUInt16_(buffer);\r\n      this.fmt.bitsPerSample = this.readUInt16_(buffer);\r\n      this.readFmtExtension_(buffer);\r\n    } else {\r\n      throw Error('Could not find the \"fmt \" chunk');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'fmt ' chunk extension.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readFmtExtension_(buffer) {\r\n    if (this.fmt.chunkSize > 16) {\r\n      this.fmt.cbSize = this.readUInt16_(buffer);\r\n      if (this.fmt.chunkSize > 18) {\r\n        this.fmt.validBitsPerSample = this.readUInt16_(buffer);\r\n        if (this.fmt.chunkSize > 20) {\r\n          this.fmt.dwChannelMask = this.readUInt32(buffer);\r\n          this.fmt.subformat = [\r\n            this.readUInt32(buffer),\r\n            this.readUInt32(buffer),\r\n            this.readUInt32(buffer),\r\n            this.readUInt32(buffer)];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'fact' chunk of a wav file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readFactChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('fact');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this.fact.chunkId = chunk.chunkId;\r\n      this.fact.chunkSize = chunk.chunkSize;\r\n      this.fact.dwSampleLength = this.readUInt32(buffer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'cue ' chunk of a wave file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readCueChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('cue ');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this.cue.chunkId = chunk.chunkId;\r\n      this.cue.chunkSize = chunk.chunkSize;\r\n      this.cue.dwCuePoints = this.readUInt32(buffer);\r\n      for (let i = 0; i < this.cue.dwCuePoints; i++) {\r\n        this.cue.points.push({\r\n          dwName: this.readUInt32(buffer),\r\n          dwPosition: this.readUInt32(buffer),\r\n          fccChunk: this.readString(buffer, 4),\r\n          dwChunkStart: this.readUInt32(buffer),\r\n          dwBlockStart: this.readUInt32(buffer),\r\n          dwSampleOffset: this.readUInt32(buffer),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'smpl' chunk of a wave file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readSmplChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('smpl');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this.smpl.chunkId = chunk.chunkId;\r\n      this.smpl.chunkSize = chunk.chunkSize;\r\n      this.smpl.dwManufacturer = this.readUInt32(buffer);\r\n      this.smpl.dwProduct = this.readUInt32(buffer);\r\n      this.smpl.dwSamplePeriod = this.readUInt32(buffer);\r\n      this.smpl.dwMIDIUnityNote = this.readUInt32(buffer);\r\n      this.smpl.dwMIDIPitchFraction = this.readUInt32(buffer);\r\n      this.smpl.dwSMPTEFormat = this.readUInt32(buffer);\r\n      this.smpl.dwSMPTEOffset = this.readUInt32(buffer);\r\n      this.smpl.dwNumSampleLoops = this.readUInt32(buffer);\r\n      this.smpl.dwSamplerData = this.readUInt32(buffer);\r\n      for (let i = 0; i < this.smpl.dwNumSampleLoops; i++) {\r\n        this.smpl.loops.push({\r\n          dwName: this.readUInt32(buffer),\r\n          dwType: this.readUInt32(buffer),\r\n          dwStart: this.readUInt32(buffer),\r\n          dwEnd: this.readUInt32(buffer),\r\n          dwFraction: this.readUInt32(buffer),\r\n          dwPlayCount: this.readUInt32(buffer),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'data' chunk of a wave file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @param {boolean} samples True if the samples should be loaded.\r\n   * @throws {Error} If no 'data' chunk is found.\r\n   * @private\r\n   */\r\n  readDataChunk_(buffer, samples) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('data');\r\n    if (chunk) {\r\n      this.data.chunkId = 'data';\r\n      this.data.chunkSize = chunk.chunkSize;\r\n      if (samples) {\r\n        this.data.samples = buffer.slice(\r\n          chunk.chunkData.start,\r\n          chunk.chunkData.end);\r\n      }\r\n    } else {\r\n      throw Error('Could not find the \"data\" chunk');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'bext' chunk of a wav file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readBextChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('bext');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this.bext.chunkId = chunk.chunkId;\r\n      this.bext.chunkSize = chunk.chunkSize;\r\n      this.bext.description = this.readString(buffer, 256);\r\n      this.bext.originator = this.readString(buffer, 32);\r\n      this.bext.originatorReference = this.readString(buffer, 32);\r\n      this.bext.originationDate = this.readString(buffer, 10);\r\n      this.bext.originationTime = this.readString(buffer, 8);\r\n      this.bext.timeReference = [\r\n        this.readUInt32(buffer),\r\n        this.readUInt32(buffer)];\r\n      this.bext.version = this.readUInt16_(buffer);\r\n      this.bext.UMID = this.readString(buffer, 64);\r\n      this.bext.loudnessValue = this.readUInt16_(buffer);\r\n      this.bext.loudnessRange = this.readUInt16_(buffer);\r\n      this.bext.maxTruePeakLevel = this.readUInt16_(buffer);\r\n      this.bext.maxMomentaryLoudness = this.readUInt16_(buffer);\r\n      this.bext.maxShortTermLoudness = this.readUInt16_(buffer);\r\n      this.bext.reserved = this.readString(buffer, 180);\r\n      this.bext.codingHistory = this.readString(\r\n        buffer, this.bext.chunkSize - 602);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'iXML' chunk of a wav file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readiXMLChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('iXML');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this.iXML.chunkId = chunk.chunkId;\r\n      this.iXML.chunkSize = chunk.chunkSize;\r\n      this.iXML.value = unpackString(\r\n        buffer, this.head, this.head + this.iXML.chunkSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'ds64' chunk of a wave file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @throws {Error} If no 'ds64' chunk is found and the file is RF64.\r\n   * @private\r\n   */\r\n  readDs64Chunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('ds64');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this.ds64.chunkId = chunk.chunkId;\r\n      this.ds64.chunkSize = chunk.chunkSize;\r\n      this.ds64.riffSizeHigh = this.readUInt32(buffer);\r\n      this.ds64.riffSizeLow = this.readUInt32(buffer);\r\n      this.ds64.dataSizeHigh = this.readUInt32(buffer);\r\n      this.ds64.dataSizeLow = this.readUInt32(buffer);\r\n      this.ds64.originationTime = this.readUInt32(buffer);\r\n      this.ds64.sampleCountHigh = this.readUInt32(buffer);\r\n      this.ds64.sampleCountLow = this.readUInt32(buffer);\r\n      //if (wav.ds64.chunkSize > 28) {\r\n      //  wav.ds64.tableLength = unpack(\r\n      //    chunkData.slice(28, 32), uInt32_);\r\n      //  wav.ds64.table = chunkData.slice(\r\n      //     32, 32 + wav.ds64.tableLength);\r\n      //}\r\n    } else {\r\n      if (this.container == 'RF64') {\r\n        throw Error('Could not find the \"ds64\" chunk');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the 'LIST' chunks of a wave file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readLISTChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let listChunks = this.findChunk('LIST', true);\r\n    if (listChunks !== null) {\r\n      for (let j=0; j < listChunks.length; j++) {\r\n        /** @type {!Object} */\r\n        let subChunk = listChunks[j];\r\n        this.LIST.push({\r\n          chunkId: subChunk.chunkId,\r\n          chunkSize: subChunk.chunkSize,\r\n          format: subChunk.format,\r\n          subChunks: []});\r\n        for (let x=0; x<subChunk.subChunks.length; x++) {\r\n          this.readLISTSubChunks_(subChunk.subChunks[x],\r\n            subChunk.format, buffer);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the sub chunks of a 'LIST' chunk.\r\n   * @param {!Object} subChunk The 'LIST' subchunks.\r\n   * @param {string} format The 'LIST' format, 'adtl' or 'INFO'.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readLISTSubChunks_(subChunk, format, buffer) {\r\n    if (format == 'adtl') {\r\n      if (['labl', 'note','ltxt'].indexOf(subChunk.chunkId) > -1) {\r\n        this.readLISTadtlSubChunks_(buffer, subChunk);\r\n      }\r\n    // RIFF INFO tags like ICRD, ISFT, ICMT\r\n    } else if(format == 'INFO') {\r\n      this.readLISTINFOSubChunks_(buffer, subChunk);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the sub chunks of a 'LIST' chunk of type 'adtl'.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @param {!Object} subChunk The 'LIST' subchunks.\r\n   * @private\r\n   */\r\n  readLISTadtlSubChunks_(buffer, subChunk) {\r\n    this.head = subChunk.chunkData.start;\r\n    /** @type {!Object<string, string|number>} */\r\n    let item = {\r\n      chunkId: subChunk.chunkId,\r\n      chunkSize: subChunk.chunkSize,\r\n      dwName: this.readUInt32(buffer)\r\n    };\r\n    if (subChunk.chunkId == 'ltxt') {\r\n      item.dwSampleLength = this.readUInt32(buffer);\r\n      item.dwPurposeID = this.readUInt32(buffer);\r\n      item.dwCountry = this.readUInt16_(buffer);\r\n      item.dwLanguage = this.readUInt16_(buffer);\r\n      item.dwDialect = this.readUInt16_(buffer);\r\n      item.dwCodePage = this.readUInt16_(buffer);\r\n      item.value = ''; // kept for compatibility\r\n    } else {\r\n      item.value = this.readZSTR_(buffer, this.head);\r\n    }\r\n    this.LIST[this.LIST.length - 1].subChunks.push(item);\r\n  }\r\n\r\n  /**\r\n   * Read the sub chunks of a 'LIST' chunk of type 'INFO'.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @param {!Object} subChunk The 'LIST' subchunks.\r\n   * @private\r\n   */\r\n  readLISTINFOSubChunks_(buffer, subChunk) {\r\n    this.head = subChunk.chunkData.start;\r\n    this.LIST[this.LIST.length - 1].subChunks.push({\r\n      chunkId: subChunk.chunkId,\r\n      chunkSize: subChunk.chunkSize,\r\n      value: this.readZSTR_(buffer, this.head)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Read the 'junk' chunk of a wave file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  readJunkChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('junk');\r\n    if (chunk) {\r\n      this.junk = {\r\n        chunkId: chunk.chunkId,\r\n        chunkSize: chunk.chunkSize,\r\n        chunkData: [].slice.call(buffer.slice(\r\n          chunk.chunkData.start,\r\n          chunk.chunkData.end))\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the '_PMX' chunk of a wav file.\r\n   * @param {!Uint8Array} buffer The wav file buffer.\r\n   * @private\r\n   */\r\n  read_PMXChunk_(buffer) {\r\n    /** @type {?Object} */\r\n    let chunk = this.findChunk('_PMX');\r\n    if (chunk) {\r\n      this.head = chunk.chunkData.start;\r\n      this._PMX.chunkId = chunk.chunkId;\r\n      this._PMX.chunkSize = chunk.chunkSize;\r\n      this._PMX.value = unpackString(\r\n        buffer, this.head, this.head + this._PMX.chunkSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read bytes as a ZSTR string.\r\n   * @param {!Uint8Array} bytes The bytes.\r\n   * @param {number=} [index=0] the index to start reading.\r\n   * @return {string} The string.\r\n   * @private\r\n   */\r\n  readZSTR_(bytes, index=0) {\r\n    for (let i = index; i < bytes.length; i++) {\r\n      this.head++;\r\n      if (bytes[i] === 0) {\r\n        break;\r\n      }\r\n    }\r\n    return unpackString(bytes, index, this.head - 1);\r\n  }\r\n\r\n  /**\r\n   * Read a number from a chunk.\r\n   * @param {!Uint8Array} bytes The chunk bytes.\r\n   * @return {number} The number.\r\n   * @private\r\n   */\r\n  readUInt16_(bytes) {\r\n    /** @type {number} */\r\n    let value = unpack(bytes, this.uInt16, this.head);\r\n    this.head += 2;\r\n    return value;\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The RIFFFile class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { unpackString, unpack } from './parsers/binary';\r\n\r\n/**\r\n * A class to perform low-level reading of RIFF/RIFX files.\r\n */\r\nexport class RIFFFile {\r\n\r\n  constructor() {\r\n    /**\r\n     * The container identifier.\r\n     * 'RIFF', 'RIFX' and 'RF64' are supported.\r\n     * @type {string}\r\n     */\r\n    this.container = '';\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.chunkSize = 0;\r\n    /**\r\n     * The format.\r\n     * @type {string}\r\n     */\r\n    this.format = '';\r\n    /**\r\n     * A object defining the start and end of all chunks in a wav buffer.\r\n     * @type {Object}\r\n     */\r\n    this.signature = null;\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.head = 0;\r\n    /**\r\n     * @type {!{bits: number, be: boolean}}\r\n     * @protected\r\n     */\r\n    this.uInt32 = {bits: 32, be: false};\r\n    /**\r\n     * The list of supported containers.\r\n     * Any format different from RIFX will be treated as RIFF.\r\n     * @type {!Array<string>}\r\n     * @protected\r\n     */\r\n    this.supported_containers = ['RIFF', 'RIFX'];\r\n  }\r\n\r\n  /**\r\n   * Read the signature of the chunks in a RIFF/RIFX file.\r\n   * @param {!Uint8Array} buffer The file bytes.\r\n   * @protected\r\n   */\r\n  setSignature(buffer) {\r\n    this.head = 0;\r\n    this.container = this.readString(buffer, 4);\r\n    if (this.supported_containers.indexOf(this.container) === -1) {\r\n      throw Error('Not a supported format.');\r\n    }\r\n    this.uInt32.be = this.container === 'RIFX';\r\n    this.chunkSize = this.readUInt32(buffer);\r\n    this.format = this.readString(buffer, 4);\r\n    // The RIFF file signature\r\n    this.signature = {\r\n      chunkId: this.container,\r\n      chunkSize: this.chunkSize,\r\n      format: this.format,\r\n      subChunks: this.getSubChunksIndex_(buffer)\r\n    };\r\n  }\r\n\r\n  /**\r\n    * Find a chunk by its fourCC_ in a array of RIFF chunks.\r\n    * @param {string} chunkId The chunk fourCC_.\r\n    * @param {boolean} [multiple=false] True if there may be multiple chunks\r\n    *    with the same chunkId.\r\n    * @return {Object}\r\n    * @protected\r\n    */\r\n  findChunk(chunkId, multiple=false) {\r\n    /** @type {!Array<Object>} */\r\n    let chunks = this.signature.subChunks;\r\n    /** @type {!Array<Object>} */\r\n    let chunk = [];\r\n    for (let i=0; i<chunks.length; i++) {\r\n      if (chunks[i].chunkId == chunkId) {\r\n        if (multiple) {\r\n          chunk.push(chunks[i]);\r\n        } else {\r\n          return chunks[i];\r\n        }\r\n      }\r\n    }\r\n    if (chunkId == 'LIST') {\r\n      return chunk.length ? chunk : null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Read bytes as a string from a RIFF chunk.\r\n   * @param {!Uint8Array} bytes The bytes.\r\n   * @param {number} maxSize the max size of the string.\r\n   * @return {string} The string.\r\n   * @protected\r\n   */\r\n  readString(bytes, maxSize) {\r\n    /** @type {string} */\r\n    let str = '';\r\n    str = unpackString(bytes, this.head, this.head + maxSize);\r\n    this.head += maxSize;\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * Read a number from a chunk.\r\n   * @param {!Uint8Array} bytes The chunk bytes.\r\n   * @return {number} The number.\r\n   * @protected\r\n   */\r\n  readUInt32(bytes) {\r\n    /** @type {number} */\r\n    let value = unpack(bytes, this.uInt32, this.head);\r\n    this.head += 4;\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Return the sub chunks of a RIFF file.\r\n   * @param {!Uint8Array} buffer the RIFF file bytes.\r\n   * @return {!Array<Object>} The subchunks of a RIFF/RIFX or LIST chunk.\r\n   * @private\r\n   */\r\n  getSubChunksIndex_(buffer) {\r\n    /** @type {!Array<!Object>} */\r\n    let chunks = [];\r\n    /** @type {number} */\r\n    let i = this.head;\r\n    while(i <= buffer.length - 8) {\r\n      chunks.push(this.getSubChunkIndex_(buffer, i));\r\n      i += 8 + chunks[chunks.length - 1].chunkSize;\r\n      i = i % 2 ? i + 1 : i;\r\n    }\r\n    return chunks;\r\n  }\r\n\r\n  /**\r\n   * Return a sub chunk from a RIFF file.\r\n   * @param {!Uint8Array} buffer the RIFF file bytes.\r\n   * @param {number} index The start index of the chunk.\r\n   * @return {!Object} A subchunk of a RIFF/RIFX or LIST chunk.\r\n   * @private\r\n   */\r\n  getSubChunkIndex_(buffer, index) {\r\n    /** @type {!Object} */\r\n    let chunk = {\r\n      chunkId: this.getChunkId_(buffer, index),\r\n      chunkSize: this.getChunkSize_(buffer, index),\r\n    };\r\n    if (chunk.chunkId == 'LIST') {\r\n      chunk.format = unpackString(buffer, index + 8, index + 12);\r\n      this.head += 4;\r\n      chunk.subChunks = this.getSubChunksIndex_(buffer);\r\n    } else {\r\n      /** @type {number} */\r\n      let realChunkSize = chunk.chunkSize % 2 ?\r\n        chunk.chunkSize + 1 : chunk.chunkSize;\r\n      this.head = index + 8 + realChunkSize;\r\n      chunk.chunkData = {\r\n        start: index + 8,\r\n        end: this.head\r\n      };\r\n    }\r\n    return chunk;\r\n  }\r\n\r\n  /**\r\n   * Return the fourCC_ of a chunk.\r\n   * @param {!Uint8Array} buffer the RIFF file bytes.\r\n   * @param {number} index The start index of the chunk.\r\n   * @return {string} The id of the chunk.\r\n   * @private\r\n   */\r\n  getChunkId_(buffer, index) {\r\n    this.head += 4;\r\n    return unpackString(buffer, index, index + 4);\r\n  }\r\n\r\n  /**\r\n   * Return the size of a chunk.\r\n   * @param {!Uint8Array} buffer the RIFF file bytes.\r\n   * @param {number} index The start index of the chunk.\r\n   * @return {number} The size of the chunk without the id and size fields.\r\n   * @private\r\n   */\r\n  getChunkSize_(buffer, index) {\r\n    this.head += 4;\r\n    return unpack(buffer, this.uInt32, index + 4);\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright 2012 Spencer Cohen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The Interpolator class. Based on Smooth.js by Spencer Cohen.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/osuushi/Smooth.js\r\n */\r\n\r\n/**\r\n * A class to get scaled values out of arrays.\r\n * @extends WaveFileReader\r\n */\r\nexport class Interpolator {\r\n  \r\n  /**\r\n   * @param {number} scaleFrom the length of the original array.\r\n   * @param {number} scaleTo The length of the new array.\r\n   * @param {!Object} details The extra configuration, if needed.\r\n   */\r\n  constructor(scaleFrom, scaleTo, details) {\r\n    /**\r\n     * The length of the original array.\r\n     * @type {number}\r\n     */\r\n    this.length_ = scaleFrom;\r\n    /**\r\n     * The scaling factor.\r\n     * @type {number}\r\n     */\r\n    this.scaleFactor_ = (scaleFrom - 1) / scaleTo;\r\n    /**\r\n     * The interpolation function.\r\n     * @type {Function}\r\n     */\r\n    this.interpolate = this.sinc;\r\n    if (details.method === 'point') {\r\n    \tthis.interpolate = this.point;\r\n    } else if(details.method === 'linear') {\r\n    \tthis.interpolate = this.linear;\r\n    } else if(details.method === 'cubic') {\r\n    \tthis.interpolate = this.cubic;\r\n    }\r\n    /**\r\n     * The tanget factor for cubic interpolation.\r\n     * @type {number}\r\n     */\r\n    this.tangentFactor_ = 1 - Math.max(0, Math.min(1, details.tension || 0));\r\n    // Configure the kernel for sinc\r\n    /**\r\n     * The sinc filter size.\r\n     * @type {number}\r\n     */\r\n    this.sincFilterSize_ = details.sincFilterSize || 1;\r\n    /**\r\n     * The sinc kernel.\r\n     * @type {Function}\r\n     */\r\n    this.kernel_ = sincKernel_(details.sincWindow || window_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  point(t, samples) {\r\n    return this.getClippedInput_(Math.round(this.scaleFactor_ * t), samples);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  linear(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    t -= k;\r\n    return (1 - t) *\r\n    \tthis.getClippedInput_(k, samples) + t *\r\n    \tthis.getClippedInput_(k + 1, samples);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  cubic(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    /** @type {Array<number>} */\r\n    let m = [this.getTangent_(k, samples), this.getTangent_(k + 1, samples)];\r\n    /** @type {Array<number>} */\r\n    let p = [this.getClippedInput_(k, samples),\r\n      this.getClippedInput_(k + 1, samples)];\r\n    t -= k;\r\n    /** @type {number} */\r\n    let t2 = t * t;\r\n    /** @type {number} */\r\n    let t3 = t * t2;\r\n    return (2 * t3 - 3 * t2 + 1) *\r\n      p[0] + (t3 - 2 * t2 + t) *\r\n      m[0] + (-2 * t3 + 3 * t2) *\r\n      p[1] + (t3 - t2) * m[1];\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  sinc(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    /** @type {number} */\r\n    let ref = k - this.sincFilterSize_ + 1;\r\n    /** @type {number} */\r\n    let ref1 = k + this.sincFilterSize_;\r\n    /** @type {number} */\r\n    let sum = 0;\r\n    for (let n = ref; n <= ref1; n++) {\r\n      sum += this.kernel_(t - n) * this.getClippedInput_(n, samples);\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * @param {number} k The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The tangent.\r\n   * @private\r\n   */\r\n  getTangent_(k, samples) {\r\n    return this.tangentFactor_ *\r\n      (this.getClippedInput_(k + 1, samples) -\r\n        this.getClippedInput_(k - 1, samples)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   * @private\r\n   */\r\n  getClippedInput_(t, samples) {\r\n    if ((0 <= t && t < this.length_)) {\r\n      return samples[t];\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * The default window function.\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction window_(x) {\r\n  return Math.exp(-x / 2 * x / 2);\r\n}\r\n\r\n/**\r\n * @param {Function} window The window function.\r\n * @return {Function}\r\n * @private\r\n */\r\nfunction sincKernel_(window) {\r\n  return function(x) { return sinc_(x) * window(x); };\r\n}\r\n\r\n/**\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction sinc_(x) {\r\n  if (x === 0) {\r\n    return 1;\r\n  }\r\n  return Math.sin(Math.PI * x) / (Math.PI * x);\r\n}\r\n","/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2014 Florian Markert\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview FIR LPF. Based on the FIR LPF from Fili by Florian Markert.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/markert/fili.js\r\n */\r\n\r\n/**\r\n * A FIR low pass filter.\r\n */\r\nexport class FIRLPF {\r\n  \r\n  /**\r\n   * @param {number} order The order of the filter.\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} cutOff The cut off frequency.\r\n   */\r\n  constructor(order, sampleRate, cutOff) {\r\n    /** @type {number} */\r\n    let omega = 2 * Math.PI * cutOff / sampleRate;\r\n    /** @type {number} */\r\n    let dc = 0;\r\n    this.filters = [];\r\n    for (let i = 0; i <= order; i++) {\r\n      if (i - order / 2 === 0) {\r\n        this.filters[i] = omega;\r\n      } else {\r\n        this.filters[i] = Math.sin(omega * (i - order / 2)) / (i - order / 2);\r\n        // Hamming window\r\n        this.filters[i] *= (0.54 - 0.46 * Math.cos(2 * Math.PI * i / order));\r\n      }\r\n      dc = dc + this.filters[i];\r\n    }\r\n    // normalize\r\n    for (let i = 0; i <= order; i++) {\r\n      this.filters[i] /= dc;\r\n    }\r\n    this.z = this.initZ_();\r\n  }\r\n\r\n  /**\r\n   * @param {number} sample A sample of a sequence.\r\n   * @return {number}\r\n   */\r\n  filter(sample) {\r\n    this.z.buf[this.z.pointer] = sample;\r\n    /** @type {number} */\r\n    let out = 0;\r\n    for (let i = 0, len = this.z.buf.length; i < len; i++) {\r\n      out += (\r\n        this.filters[i] * this.z.buf[(this.z.pointer + i) % this.z.buf.length]);\r\n    }\r\n    this.z.pointer = (this.z.pointer + 1) % (this.z.buf.length);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Reset the filter.\r\n   */\r\n  reset() {\r\n    this.z = this.initZ_();\r\n  }\r\n\r\n  /**\r\n   * Return the default value for z.\r\n   * @private\r\n   */\r\n  initZ_() {\r\n    /** @type {!Array} */\r\n    let r = [];\r\n    for (let i = 0; i < this.filters.length - 1; i++) {\r\n      r.push(0);\r\n    }\r\n    return {\r\n      buf: r,\r\n      pointer: 0\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The resample function.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { Interpolator } from './interpolator';\r\nimport { FIRLPF } from './fir-lpf';\r\nimport { ButterworthLPF } from './butterworth-lpf';\r\n\r\n/**\r\n * Default use of LPF for each resampling method.\r\n * @readonly\r\n * @enum {boolean}\r\n * @private\r\n */\r\nconst DEFAULT_LPF_USE = {\r\n  'point': false,\r\n  'linear': false,\r\n  'cubic': true,\r\n  'sinc': true\r\n};\r\n\r\n/**\r\n * Default LPF order for each type of LPF.\r\n * @readonly\r\n * @enum {number}\r\n * @private\r\n */\r\nconst DEFAULT_LPF_ORDER = {\r\n  'IIR': 16,\r\n  'FIR': 71\r\n};\r\n\r\n/**\r\n * Default LPF class for each type of LPF.\r\n * @readonly\r\n * @enum {!Function}\r\n * @private\r\n */\r\nconst DEFAULT_LPF = {\r\n  'IIR': ButterworthLPF,\r\n  'FIR': FIRLPF\r\n};\r\n\r\n/**\r\n * Change the sample rate of the samples to a new sample rate.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {number} oldSampleRate The original sample rate.\r\n * @param {number} sampleRate The target sample rate.\r\n * @param {Object=} options The extra configuration, if needed.\r\n * @return {!Float64Array} the new samples.\r\n */\r\nexport function resample(samples, oldSampleRate, sampleRate, options=null) {\r\n  options = options || {};\r\n  // Make the new sample container\r\n  /** @type {number} */\r\n  let rate = ((sampleRate - oldSampleRate) / oldSampleRate) + 1;\r\n  /** @type {!Float64Array} */\r\n  let newSamples = new Float64Array(samples.length * (rate));\r\n  // Create the interpolator\r\n  options.method = options.method || 'cubic';\r\n  /** @type {!Object} */\r\n  let interpolator = new Interpolator(\r\n    samples.length,\r\n    newSamples.length,\r\n    {\r\n      method: options.method,\r\n      tension: options.tension || 0,\r\n      sincFilterSize: options.sincFilterSize || 6,\r\n      sincWindow: options.sincWindow || undefined,\r\n      clip: options.clip || 'mirror'\r\n    });\r\n  // Resample + LPF\r\n  if (options.LPF === undefined) {\r\n    options.LPF = DEFAULT_LPF_USE[options.method];\r\n  } \r\n  if (options.LPF) {\r\n    options.LPFType = options.LPFType || 'IIR';\r\n    const LPF = DEFAULT_LPF[options.LPFType];\r\n    // Upsampling\r\n    if (sampleRate > oldSampleRate) {\r\n      /** @type {!Object} */\r\n      let filter = new LPF(\r\n        options.LPForder || DEFAULT_LPF_ORDER[options.LPFType],\r\n        sampleRate,\r\n        (oldSampleRate / 2));\r\n      upsample_(\r\n        samples, newSamples, interpolator, filter);\r\n    // Downsampling\r\n    } else {\r\n      /** @type {!Object} */\r\n      let filter = new LPF(\r\n        options.LPForder || DEFAULT_LPF_ORDER[options.LPFType],\r\n        oldSampleRate,\r\n        sampleRate / 2);\r\n      downsample_(\r\n        samples, newSamples, interpolator, filter);\r\n    }\r\n  // Resample, no LPF\r\n  } else {\r\n    resample_(samples, newSamples, interpolator);\r\n  }\r\n  return newSamples;\r\n}\r\n\r\n/**\r\n * Resample.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @private\r\n */\r\nfunction resample_(samples, newSamples, interpolator) {\r\n  // Resample\r\n  for (let i = 0, len = newSamples.length; i < len; i++) {\r\n    newSamples[i] = interpolator.interpolate(i, samples);\r\n  }\r\n}\r\n\r\n/**\r\n * Upsample with LPF.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @param {Object} filter The LPF object.\r\n * @private\r\n */\r\nfunction upsample_(samples, newSamples, interpolator, filter) {\r\n  // Resample and filter\r\n  for (let i = 0, len = newSamples.length; i < len; i++) {\r\n    newSamples[i] = filter.filter(interpolator.interpolate(i, samples));\r\n  }\r\n  // Reverse filter\r\n  filter.reset();\r\n  for (let i = newSamples.length - 1; i >= 0; i--) {\r\n    newSamples[i]  = filter.filter(newSamples[i]);\r\n  }\r\n}\r\n\r\n/**\r\n * Downsample with LPF.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @param {Object} filter The LPF object.\r\n * @private\r\n */\r\nfunction downsample_(samples, newSamples, interpolator, filter) {\r\n  // Filter\r\n  for (let i = 0, len = samples.length; i < len; i++) {\r\n    samples[i]  = filter.filter(samples[i]);\r\n  }\r\n  // Reverse filter\r\n  filter.reset();\r\n  for (let i = samples.length - 1; i >= 0; i--) {\r\n    samples[i]  = filter.filter(samples[i]);\r\n  }\r\n  // Resample\r\n  resample_(samples, newSamples, interpolator);\r\n}\r\n","/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2014 Florian Markert\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview Butterworth LPF. Based on the Butterworth LPF from Fili.js.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/markert/fili.js\r\n */\r\n\r\n/**\r\n * Butterworth LPF.\r\n */\r\nexport class ButterworthLPF {\r\n  \r\n  /**\r\n   * @param {number} order The order of the filter.\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} cutOff The cut off frequency.\r\n   */\r\n  constructor(order, sampleRate, cutOff) {\r\n    /** @type {!Array} */\r\n    let filters = [];\r\n    for (let i = 0; i < order; i++) {\r\n      filters.push(this.getCoeffs_({\r\n        Fs: sampleRate,\r\n        Fc: cutOff,\r\n        Q: 0.5 / (Math.sin((Math.PI / (order * 2)) * (i + 0.5)))\r\n      }));\r\n    }\r\n    this.stages = [];\r\n    for (let i = 0; i < filters.length; i++) {\r\n      this.stages[i] = {\r\n        b0 : filters[i].b[0],\r\n        b1 : filters[i].b[1],\r\n        b2 : filters[i].b[2],\r\n        a1 : filters[i].a[0],\r\n        a2 : filters[i].a[1],\r\n        k : filters[i].k,\r\n        z : [0, 0]\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} sample A sample of a sequence.\r\n   * @return {number}\r\n   */\r\n  filter(sample) {\r\n    /** @type {number} */\r\n    let out = sample;\r\n    for (let i = 0, len = this.stages.length; i < len; i++) {\r\n      out = this.runStage_(i, out);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * @param {!Object} params The filter params.\r\n   * @return {!Object}\r\n   */\r\n  getCoeffs_(params) {\r\n    /** @type {!Object} */\r\n    let coeffs = {};\r\n    coeffs.a = [];\r\n    coeffs.b = [];\r\n    /** @type {!Object} */\r\n    let p = this.preCalc_(params, coeffs);\r\n    coeffs.k = 1;\r\n    coeffs.b.push((1 - p.cw) / (2 * p.a0));\r\n    coeffs.b.push(2 * coeffs.b[0]);\r\n    coeffs.b.push(coeffs.b[0]);\r\n    return coeffs;\r\n  }\r\n\r\n  /**\r\n   * @param {!Object} params The filter params.\r\n   * @param {!Object} coeffs The coefficients template.\r\n   * @return {!Object}\r\n   */\r\n  preCalc_(params, coeffs) {\r\n    /** @type {!Object} */\r\n    let pre = {};\r\n    /** @type {number} */\r\n    let w = 2 * Math.PI * params.Fc / params.Fs;\r\n    pre.alpha = Math.sin(w) / (2 * params.Q);\r\n    pre.cw = Math.cos(w);\r\n    pre.a0 = 1 + pre.alpha;\r\n    coeffs.a0 = pre.a0;\r\n    coeffs.a.push((-2 * pre.cw) / pre.a0);\r\n    coeffs.k = 1;\r\n    coeffs.a.push((1 - pre.alpha) / pre.a0);\r\n    return pre;\r\n  }\r\n  \r\n  /**\r\n   * @param {number} i The stage index.\r\n   * @param {number} sample The sample.\r\n   * @return {number}\r\n   */\r\n  runStage_(i, sample) {\r\n    /** @type {number} */\r\n    let temp = sample * this.stages[i].k - this.stages[i].a1 *\r\n      this.stages[i].z[0] - this.stages[i].a2 * this.stages[i].z[1];\r\n    /** @type {number} */\r\n    let out = this.stages[i].b0 * temp + this.stages[i].b1 *\r\n      this.stages[i].z[0] + this.stages[i].b2 * this.stages[i].z[1];\r\n    this.stages[i].z[1] = this.stages[i].z[0];\r\n    this.stages[i].z[0] = temp;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Reset the filter.\r\n   */\r\n  reset() {\r\n    for (let i = 0; i < this.stages.length; i++) {\r\n      this.stages[i].z = [0, 0];\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFileConverter class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { changeBitDepth } from './codecs/bitdepth';\r\nimport * as imaadpcm from './codecs/imaadpcm';\r\nimport * as alaw from './codecs/alaw';\r\nimport * as mulaw from './codecs/mulaw';\r\nimport { unpackArrayTo } from './parsers/binary';\r\nimport { WaveFileCueEditor } from './wavefile-cue-editor';\r\nimport { validateSampleRate } from './validators/validate-sample-rate';\r\nimport { resample } from './resampler';\r\n\r\n/**\r\n * A class to convert wav files to other types of wav files.\r\n * @extends WaveFileCueEditor\r\n * @ignore\r\n */\r\nexport class WaveFileConverter extends WaveFileCueEditor {\r\n\r\n  /**\r\n   * Force a file as RIFF.\r\n   */\r\n  toRIFF() {\r\n    /** @type {!Float64Array} */\r\n    let output = new Float64Array(\r\n      outputSize_(this.data.samples.length, this.dataType.bits / 8));\r\n    unpackArrayTo(this.data.samples, this.dataType, output,\r\n      0, this.data.samples.length);\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      this.bitDepth,\r\n      output,\r\n      {container: 'RIFF'});\r\n  }\r\n\r\n  /**\r\n   * Force a file as RIFX.\r\n   */\r\n  toRIFX() {\r\n    /** @type {!Float64Array} */\r\n    let output = new Float64Array(\r\n      outputSize_(this.data.samples.length, this.dataType.bits / 8));\r\n    unpackArrayTo(this.data.samples, this.dataType, output,\r\n      0, this.data.samples.length);\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      this.bitDepth,\r\n      output,\r\n      {container: 'RIFX'});\r\n  }\r\n\r\n  /**\r\n   * Encode a 16-bit wave file as 4-bit IMA ADPCM.\r\n   * @throws {Error} If sample rate is not 8000.\r\n   * @throws {Error} If number of channels is not 1.\r\n   */\r\n  toIMAADPCM() {\r\n    if (this.fmt.sampleRate !== 8000) {\r\n      throw new Error(\r\n        'Only 8000 Hz files can be compressed as IMA-ADPCM.');\r\n    } else if (this.fmt.numChannels !== 1) {\r\n      throw new Error(\r\n        'Only mono files can be compressed as IMA-ADPCM.');\r\n    } else {\r\n      this.assure16Bit_();\r\n      /** @type {!Int16Array} */\r\n      let output = new Int16Array(\r\n        outputSize_(this.data.samples.length, 2));\r\n      unpackArrayTo(this.data.samples, this.dataType, output,\r\n        0, this.data.samples.length);\r\n      this.fromExisting_(\r\n        this.fmt.numChannels,\r\n        this.fmt.sampleRate,\r\n        '4',\r\n        imaadpcm.encode(output),\r\n        {container: this.correctContainer_()});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decode a 4-bit IMA ADPCM wave file as a 16-bit wave file.\r\n   * @param {string=} [bitDepthCode='16'] The new bit depth of the samples.\r\n   *    One of '8' ... '32' (integers), '32f' or '64' (floats).\r\n   */\r\n  fromIMAADPCM(bitDepthCode='16') {\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      '16',\r\n      imaadpcm.decode(this.data.samples, this.fmt.blockAlign),\r\n      {container: this.correctContainer_()});\r\n    if (bitDepthCode != '16') {\r\n      this.toBitDepth(bitDepthCode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encode a 16-bit wave file as 8-bit A-Law.\r\n   */\r\n  toALaw() {\r\n    this.assure16Bit_();\r\n    /** @type {!Int16Array} */\r\n    let output = new Int16Array(\r\n      outputSize_(this.data.samples.length, 2));\r\n    unpackArrayTo(this.data.samples, this.dataType, output,\r\n        0, this.data.samples.length);\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      '8a',\r\n      alaw.encode(output),\r\n      {container: this.correctContainer_()});\r\n  }\r\n\r\n  /**\r\n   * Decode a 8-bit A-Law wave file into a 16-bit wave file.\r\n   * @param {string=} [bitDepthCode='16'] The new bit depth of the samples.\r\n   *    One of '8' ... '32' (integers), '32f' or '64' (floats).\r\n   */\r\n  fromALaw(bitDepthCode='16') {\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      '16',\r\n      alaw.decode(this.data.samples),\r\n      {container: this.correctContainer_()});\r\n    if (bitDepthCode != '16') {\r\n      this.toBitDepth(bitDepthCode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encode 16-bit wave file as 8-bit mu-Law.\r\n   */\r\n  toMuLaw() {\r\n    this.assure16Bit_();\r\n    /** @type {!Int16Array} */\r\n    let output = new Int16Array(\r\n      outputSize_(this.data.samples.length, 2));\r\n    unpackArrayTo(this.data.samples, this.dataType, output,\r\n        0, this.data.samples.length);\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      '8m',\r\n      mulaw.encode(output),\r\n      {container: this.correctContainer_()});\r\n  }\r\n\r\n  /**\r\n   * Decode a 8-bit mu-Law wave file into a 16-bit wave file.\r\n   * @param {string=} [bitDepthCode='16'] The new bit depth of the samples.\r\n   *    One of '8' ... '32' (integers), '32f' or '64' (floats).\r\n   */\r\n  fromMuLaw(bitDepthCode='16') {\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      '16',\r\n      mulaw.decode(this.data.samples),\r\n      {container: this.correctContainer_()});\r\n    if (bitDepthCode != '16') {\r\n      this.toBitDepth(bitDepthCode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change the bit depth of the samples.\r\n   * @param {string} newBitDepth The new bit depth of the samples.\r\n   *    One of '8' ... '32' (integers), '32f' or '64' (floats)\r\n   * @param {boolean=} [changeResolution=true] A boolean indicating if the\r\n   *    resolution of samples should be actually changed or not.\r\n   * @throws {Error} If the bit depth is not valid.\r\n   */\r\n  toBitDepth(newBitDepth, changeResolution=true) {\r\n    /** @type {string} */\r\n    let toBitDepth = newBitDepth;\r\n    /** @type {string} */\r\n    let thisBitDepth = this.bitDepth;\r\n    if (!changeResolution) {\r\n      if (newBitDepth != '32f') {\r\n        toBitDepth = this.dataType.bits.toString();\r\n      }\r\n      thisBitDepth = '' + this.dataType.bits;\r\n    }\r\n    // If the file is compressed, make it\r\n    // PCM before changing the bit depth\r\n    this.assureUncompressed_();\r\n    /**\r\n     * The original samples, interleaved.\r\n     * @type {!(Array|TypedArray)}\r\n     */\r\n    let samples = this.getSamples(true);\r\n    /**\r\n     * The container for the new samples.\r\n     * @type {!Float64Array}\r\n     */\r\n    let newSamples = new Float64Array(samples.length);\r\n    // Change the bit depth\r\n    changeBitDepth(samples, thisBitDepth, newSamples, toBitDepth);\r\n    // Re-create the file\r\n    this.fromExisting_(\r\n      this.fmt.numChannels,\r\n      this.fmt.sampleRate,\r\n      newBitDepth,\r\n      newSamples,\r\n      {container: this.correctContainer_()});\r\n  }\r\n\r\n  /**\r\n   * Convert the sample rate of the file.\r\n   * @param {number} sampleRate The target sample rate.\r\n   * @param {Object=} options The extra configuration, if needed.\r\n   */\r\n  toSampleRate(sampleRate, options) {\r\n    this.validateResample_(sampleRate);\r\n    /** @type {!(Array|TypedArray)} */\r\n    let samples = this.getSamples();\r\n    /** @type {!(Array|Float64Array)} */\r\n    let newSamples = [];\r\n    // Mono files\r\n    if (samples.constructor === Float64Array) {\r\n      newSamples = resample(samples, this.fmt.sampleRate, sampleRate, options);\r\n    // Multi-channel files\r\n    } else {\r\n      for (let i = 0; i < samples.length; i++) {\r\n        newSamples.push(resample(\r\n          samples[i], this.fmt.sampleRate, sampleRate, options));\r\n      }\r\n    }\r\n    // Recreate the file\r\n    this.fromExisting_(\r\n      this.fmt.numChannels, sampleRate, this.bitDepth, newSamples,\r\n      {'container': this.correctContainer_()});\r\n  }\r\n\r\n  /**\r\n   * Validate the conditions for resampling.\r\n   * @param {number} sampleRate The target sample rate.\r\n   * @throws {Error} If the file cant be resampled.\r\n   * @private\r\n   */\r\n  validateResample_(sampleRate) {\r\n    if (!validateSampleRate(\r\n        this.fmt.numChannels, this.fmt.bitsPerSample, sampleRate)) {\r\n      throw new Error('Invalid sample rate.');\r\n    } else if (['4','8a','8m'].indexOf(this.bitDepth) > -1) {\r\n      throw new Error(\r\n        'wavefile can\\'t change the sample rate of compressed files.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make the file 16-bit if it is not.\r\n   * @private\r\n   */\r\n  assure16Bit_() {\r\n    this.assureUncompressed_();\r\n    if (this.bitDepth != '16') {\r\n      this.toBitDepth('16');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uncompress the samples in case of a compressed file.\r\n   * @private\r\n   */\r\n  assureUncompressed_() {\r\n    if (this.bitDepth == '8a') {\r\n      this.fromALaw();\r\n    } else if (this.bitDepth == '8m') {\r\n      this.fromMuLaw();\r\n    } else if (this.bitDepth == '4') {\r\n      this.fromIMAADPCM();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return 'RIFF' if the container is 'RF64', the current container name\r\n   * otherwise. Used to enforce 'RIFF' when RF64 is not allowed.\r\n   * @return {string}\r\n   * @private\r\n   */\r\n  correctContainer_() {\r\n    return this.container == 'RF64' ? 'RIFF' : this.container;\r\n  }\r\n\r\n  /**\r\n   * Set up the WaveFileCreator object based on the arguments passed.\r\n   * This method only reset the fmt , fact, ds64 and data chunks.\r\n   * @param {number} numChannels The number of channels\r\n   *    (Integer numbers: 1 for mono, 2 stereo and so on).\r\n   * @param {number} sampleRate The sample rate.\r\n   *    Integer numbers like 8000, 44100, 48000, 96000, 192000.\r\n   * @param {string} bitDepthCode The audio bit depth code.\r\n   *    One of '4', '8', '8a', '8m', '16', '24', '32', '32f', '64'\r\n   *    or any value between '8' and '32' (like '12').\r\n   * @param {!(Array|TypedArray)} samples\r\n   *    The samples. Must be in the correct range according to the bit depth.\r\n   * @param {Object} options Used to define the container. Uses RIFF by default.\r\n   * @throws {Error} If any argument does not meet the criteria.\r\n   * @private\r\n   */\r\n  fromExisting_(numChannels, sampleRate, bitDepthCode, samples, options) {\r\n    /** @type {!Object} */\r\n    let tmpWav = new WaveFileCueEditor();\r\n    Object.assign(this.fmt, tmpWav.fmt);\r\n    Object.assign(this.fact, tmpWav.fact);\r\n    Object.assign(this.ds64, tmpWav.ds64);\r\n    Object.assign(this.data, tmpWav.data);\r\n    this.newWavFile_(numChannels, sampleRate, bitDepthCode, samples, options);\r\n  }\r\n}\r\n\r\n/**\r\n * Return the size in bytes of the output sample array when applying\r\n * compression to 16-bit samples.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction outputSize_(byteLen, byteOffset) {\r\n  /** @type {number} */\r\n  let outputSize = byteLen / byteOffset;\r\n  if (outputSize % 2) {\r\n    outputSize++;\r\n  }\r\n  return outputSize;\r\n}\r\n","/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFile class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/** @module wavefile */\r\n\r\nimport { encode, decode } from './lib/parsers/base64-arraybuffer.js';\r\nimport { WaveFileConverter } from './lib/wavefile-converter';\r\n\r\n/**\r\n * A class to manipulate wav files.\r\n * @extends WaveFileConverter\r\n */\r\nexport class WaveFile extends WaveFileConverter {\r\n\r\n  /**\r\n   * @param {Uint8Array=} wav A wave file buffer.\r\n   * @throws {Error} If container is not RIFF, RIFX or RF64.\r\n   * @throws {Error} If format is not WAVE.\r\n   * @throws {Error} If no 'fmt ' chunk is found.\r\n   * @throws {Error} If no 'data' chunk is found.\r\n   */\r\n  constructor(wav) {\r\n    super();\r\n    if (wav) {\r\n      this.fromBuffer(wav);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use a .wav file encoded as a base64 string to load the WaveFile object.\r\n   * @param {string} base64String A .wav file as a base64 string.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  fromBase64(base64String) {\r\n    this.fromBuffer(decode(base64String));\r\n  }\r\n\r\n  /**\r\n   * Return a base64 string representig the WaveFile object as a .wav file.\r\n   * @return {string} A .wav file as a base64 string.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  toBase64() {\r\n    return encode(this.toBuffer());\r\n  }\r\n\r\n  /**\r\n   * Return a DataURI string representig the WaveFile object as a .wav file.\r\n   * The return of this method can be used to load the audio in browsers.\r\n   * @return {string} A .wav file as a DataURI.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  toDataURI() {\r\n    return 'data:audio/wav;base64,' + this.toBase64();\r\n  }\r\n\r\n  /**\r\n   * Use a .wav file encoded as a DataURI to load the WaveFile object.\r\n   * @param {string} dataURI A .wav file as DataURI.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  fromDataURI(dataURI) {\r\n    this.fromBase64(dataURI.replace('data:audio/wav;base64,', ''));\r\n  }\r\n}\r\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer(obj: any, transfers: Transferable[]) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { expose } from 'comlink';\n  import _objectSpread from\"/home/ctrl/prog/natify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import*as base64 from\"byte-base64\";import{WaveFile}from\"wavefile\";import Interp from\"./Interp\";var pako=require(\"pako\");var fft=require(\"jsfft\");var cloneDeep=require(\"lodash.clonedeep\");export function objToCompressedB64(obj){var objJsonStr=JSON.stringify(obj);var objJsonB64=base64.bytesToBase64(pako.deflate(objJsonStr));return objJsonB64;}export function compressedB64ToObj(b64){return JSON.parse(pako.inflate(base64.base64ToBytes(b64),{to:\"string\"}));}function hashCode(s){return s.split(\"\").reduce(function(a,b){a=(a<<5)-a+b.charCodeAt(0);return a&a;},0);}function widgetsVal(widgets){var paramsVal={};Object.keys(widgets).forEach(function(key){if(widgets[key].type===\"curve\"){var interp=new Interp(widgets[key].value.arr);paramsVal[key]={value:widgets[key].value,interp:interp,get:widgets[key].value.mode===\"nearest\"?function(i){return interp.nearest(i);}:widgets[key].value.mode===\"linear\"?function(i){return interp.linear(i);}:widgets[key].value.mode===\"smooth\"?function(i){return interp.smoothstep(i);}:function(i){return interp.cubic(i);}};}else{paramsVal[key]=widgets[key].value;}});return paramsVal;}function completeNewWidgets(userCodeWidgets,oldWidgets){var usage={DURATION:true};var newWidgets=cloneDeep(oldWidgets);if(!newWidgets.DURATION)newWidgets.DURATION={min:0.1,max:10.0,step:0.1,unit:\"s\",placeholder:1,value:1.0};Object.keys(userCodeWidgets).forEach(function(widgetKey){usage[widgetKey]=true;var current=userCodeWidgets[widgetKey];var old=newWidgets[widgetKey];var isSlider=current.min!==undefined;var isGrid=current.width!==undefined;var isCurve=current.type===\"curve\";if(isSlider){var min=current.min,max=current.max,step=current.step,_current$unit=current.unit,unit=_current$unit===void 0?\"\":_current$unit,_current$placeholder=current.placeholder,placeholder=_current$placeholder===void 0?min>0?Math.sqrt(min*max):Math.sqrt(max):_current$placeholder;var clean={min:min,max:max,step:step,unit:unit,placeholder:placeholder,value:placeholder};if(!newWidgets[widgetKey]){console.log(\"WIDGETS need to add  \",widgetKey);newWidgets[widgetKey]=clean;}else{var isEdited=min!==old.min||max!==old.max||step!==old.step||unit!==old.unit;if(old.value!=null&&old.value<=max&&old.value>=min){clean.value=old.value;}if(isEdited){console.log(\"WIDGETS need to edit \",widgetKey);newWidgets[widgetKey]=clean;}}}else if(isGrid){var _clean=_objectSpread({},current);if(!_clean.value||_clean.value.length!=current.width||_clean.value[0].length!=current.height){_clean.value=[];for(var row=0;row<_clean.height;row++){_clean.value[row]=[];for(var col=0;col<_clean.width;col++){_clean.value[row][col]=false;}}}if(!old){newWidgets[widgetKey]=_clean;}else{if(old.width!==_clean.width||old.height!==_clean.height){newWidgets[widgetKey]=_clean;}}}else if(isCurve){if(!old||old.type!==current.type){var arr=[];for(var i=0;i<10;i++){arr.push(0);}newWidgets[widgetKey]={type:\"curve\",value:{arr:arr,mode:\"linear\"}};}}});Object.keys(newWidgets).forEach(function(key){if(usage[key]!==true){console.log(\"DELETING \",key);delete newWidgets[key];}});console.log(\"old \",oldWidgets);console.log(\"usr \",userCodeWidgets);console.log(\"new \",newWidgets);return newWidgets;}function compileJsSoundCode(_ref){var code=_ref.code,widgets=_ref.widgets;var oldWidgets=cloneDeep(widgets);try{var paramsArgs=Object.keys(widgets).map(function(e){return e+\",\";}).join(\"\");var code2=\"((SAMPLE_COUNT, RATE,CHANNEL, WIDGETS, {\"+paramsArgs.slice(0,-1)+\"}) => {\"+code+\"})\";var f=eval(code2);console.log(\"IGNORE\");var paramsVal=widgetsVal(widgets);widgets={};var a=f(1,44100,0,widgets,paramsVal);console.log(\"END IGNORE\");return{func:f,valid:true,widgets:completeNewWidgets(widgets,oldWidgets)};}catch(e){console.error(\"CANT USE CODE \",e);return{func:function func(){return 0.0;},valid:false,oldWidgets:oldWidgets};}}export function testSetting(_ref2){var code=_ref2.code,widgets=_ref2.widgets;console.log(\"widgets test\",widgets);var compiled=compileJsSoundCode({code:code,widgets:widgets});return{valid:compiled.valid,widgets:compiled.widgets};}export function computeSetting(setting,N,rate){console.log(\"computeSetting \",setting);var compiled=compileJsSoundCode(cloneDeep(setting));var paramsVal=widgetsVal(setting.widgets);console.log(\"paramsVal\",paramsVal);var res=[0];try{res=compiled.func(N,rate,0,setting.widgets,paramsVal);}catch(e){console.error(\"computeSetting catch \",e);}if(Array.isArray(res)){res={samples:res};}var start=performance.now();var loudness=[0];var blockSize=Math.floor(rate/20);var blocks=Math.floor(N/blockSize);var _loop=function _loop(i){var f=new fft.ComplexArray(blockSize).map(function(value,valueIndex,n){value.real=res.samples[i*blockSize+valueIndex];}).FFT();var m=f.magnitude().slice(0,blockSize/2);var l=m.reduce(function(a,b){return a+b;});// l = Math.pow(l, 0.5);\nloudness.push(l);};for(var i=0;i<blocks;i++){_loop(i);}loudness.push(0);var max=loudness.reduce(function(a,b){return Math.max(a,b);});loudness.forEach(function(e,i,a){return a[i]=e/max;});res.loudness=loudness;var end=performance.now();console.log(\"Loudness took : \",end-start,\"ms\");return res;}export function exportWav(rate,buffer){var wav=new WaveFile();var bufferInt=buffer.map(function(v){return v*32767;});wav.fromScratch(1,rate,\"16\",bufferInt);var res=wav.toBase64();return\"data:Audio/WAV;base64,\"+res;// var WAV = new Audio(\"data:Audio/WAV;base64,\" + res);\n// WAV.setAttribute(\"controls\", \"controls\");\n// WAV.play();\n};\n  expose(\n    Object.keys(__webpack_exports__).reduce(function(r,k){\n      if (k=='__esModule') return r;\n      r[k] = __webpack_exports__[k];\n      return r\n    },{})\n  )","\n/*! pako 2.0.3 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) =>\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nconst copy_block = (s, buf, len, header) =>\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n  s.pending += len;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) =>\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) =>\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let lx = 0;         /* running index in l_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) =>\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let black_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) =>\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //let out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n};\n\nvar _tr_init_1  = _tr_init;\nvar _tr_stored_block_1 = _tr_stored_block;\nvar _tr_flush_block_1  = _tr_flush_block;\nvar _tr_tally_1 = _tr_tally;\nvar _tr_align_1 = _tr_align;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init: _tr_init$1, _tr_stored_block: _tr_stored_block$1, _tr_flush_block: _tr_flush_block$1, _tr_tally: _tr_tally$1, _tr_align: _tr_align$1 } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED: Z_FIXED$1, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN: Z_UNKNOWN$1,\n  Z_DEFLATED\n} = constants;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES$1       = 30;\n/* number of distance codes */\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\nconst MAX_BITS$1  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH$1 = 3;\nconst MAX_MATCH$1 = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH$1 + MIN_MATCH$1 + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst EXTRA_STATE = 69;\nconst NAME_STATE = 73;\nconst COMMENT_STATE = 91;\nconst HCRC_STATE = 103;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero$1 = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block$1(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH$1;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH$1 - (strend - scan);\n    scan = strend - MAX_MATCH$1;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH$1) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH$1) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  let max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    const max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH$1) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH$1) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally$1(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH$1) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH$1 - 1)) ? s.strstart : MIN_MATCH$1 - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH$1) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH$1 - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH$1 - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH$1;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally$1(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH$1 - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH$1) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH$1;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH$1 - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH$1) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally$1(s, 1, s.match_length - MIN_MATCH$1);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally$1(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero$1(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH$1 - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE$1 * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES$1 + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES$1 + 1) * 2);\n  zero$1(this.dyn_ltree);\n  zero$1(this.dyn_dtree);\n  zero$1(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES$1 + 1);  /* heap used to build the Huffman trees */\n  zero$1(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];\n  zero$1(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN$1;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  _tr_init$1(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED$1) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\nconst deflate = (strm, flush) => {\n\n  let beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      let level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align$1(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block$1(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero$1(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero$1(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH$1) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH$1 - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH$1 - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH$1 - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2 = deflate;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  let i, out;\n  const len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$1,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION$1,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY$1\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$1) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$1) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$1 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH$1) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$1) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$1;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$1) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1 = Deflate;\nvar deflate_2$1 = deflate$1;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar constants$1 = constants;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_2$1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 30;       /* got a data error -- remain here until reset */\nconst TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$2, Z_BLOCK: Z_BLOCK$1, Z_TREES,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2, Z_NEED_DICT, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD$1 = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS$1;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS$1);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS$1);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$2;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$2) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS$1,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS$1, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE$1) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$2;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD$1;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED$2) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD$1;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD$1;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE$1;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED$2) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD$1;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD$1;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD$1;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE$1;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE$1;\n        /* falls through */\n      case TYPE$1:\n        if (flush === Z_BLOCK$1 || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD$1;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD$1;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE$1;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD$1;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD$1;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD$1;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD$1;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD$1) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD$1;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD$1;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD$1;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE$1) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE$1;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD$1;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD$1;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD$1;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD$1;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD$1;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$2;\n        break inf_leave;\n      case BAD$1:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD$1 &&\n                      (state.mode < CHECK || flush !== Z_FINISH$2))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE$1 ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$2) && ret === Z_OK$2) {\n    ret = Z_BUF_ERROR$1;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$2;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$2;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$2;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2 = inflate;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n\nvar inflate_1 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_FINISH: Z_FINISH$3,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_MEM_ERROR: Z_MEM_ERROR$1\n} = constants;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK$3) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK$3) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$3 : Z_NO_FLUSH$2;\n\n  // Convert data if needed\n  if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT$1 && dictionary) {\n      status = inflate_1.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK$3) {\n        status = inflate_1.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR$2) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT$1;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END$3 &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1.inflateReset(strm);\n      status = inflate_1.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR$2:\n      case Z_DATA_ERROR$2:\n      case Z_NEED_DICT$1:\n      case Z_MEM_ERROR$1:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END$3) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK$3 && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END$3) {\n      status = inflate_1.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$3) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1 = Inflate;\nvar inflate_2$1 = inflate$1;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip = inflate$1;\nvar constants$2 = constants;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1,\n\tinflate: inflate_2$1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip,\n\tconstants: constants$2\n};\n\nconst { Deflate: Deflate$1, deflate: deflate$2, deflateRaw: deflateRaw$1, gzip: gzip$1 } = deflate_1$1;\n\nconst { Inflate: Inflate$1, inflate: inflate$2, inflateRaw: inflateRaw$1, ungzip: ungzip$1 } = inflate_1$1;\n\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_1$2 = deflate$2;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar Inflate_1$1 = Inflate$1;\nvar inflate_1$2 = inflate$2;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip_1 = ungzip$1;\nvar constants_1 = constants;\n\nvar pako = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_1$2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tInflate: Inflate_1$1,\n\tinflate: inflate_1$2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport default pako;\nexport { Deflate_1$1 as Deflate, Inflate_1$1 as Inflate, constants_1 as constants, deflate_1$2 as deflate, deflateRaw_1$1 as deflateRaw, gzip_1$1 as gzip, inflate_1$2 as inflate, inflateRaw_1$1 as inflateRaw, ungzip_1 as ungzip };\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComplexArray = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.FFT = FFT;\nexports.InvFFT = InvFFT;\nexports.frequencyMap = frequencyMap;\n\nvar _complex_array = require('./complex_array');\n\nvar _complex_array2 = _interopRequireDefault(_complex_array);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Math constants and functions we need.\nvar PI = Math.PI;\nvar SQRT1_2 = Math.SQRT1_2;\n\nfunction FFT(input) {\n  return ensureComplexArray(input).FFT();\n};\n\nfunction InvFFT(input) {\n  return ensureComplexArray(input).InvFFT();\n};\n\nfunction frequencyMap(input, filterer) {\n  return ensureComplexArray(input).frequencyMap(filterer);\n};\n\nvar ComplexArray = exports.ComplexArray = function (_baseComplexArray) {\n  _inherits(ComplexArray, _baseComplexArray);\n\n  function ComplexArray() {\n    _classCallCheck(this, ComplexArray);\n\n    return _possibleConstructorReturn(this, (ComplexArray.__proto__ || Object.getPrototypeOf(ComplexArray)).apply(this, arguments));\n  }\n\n  _createClass(ComplexArray, [{\n    key: 'FFT',\n    value: function FFT() {\n      return fft(this, false);\n    }\n  }, {\n    key: 'InvFFT',\n    value: function InvFFT() {\n      return fft(this, true);\n    }\n\n    // Applies a frequency-space filter to input, and returns the real-space\n    // filtered input.\n    // filterer accepts freq, i, n and modifies freq.real and freq.imag.\n\n  }, {\n    key: 'frequencyMap',\n    value: function frequencyMap(filterer) {\n      return this.FFT().map(filterer).InvFFT();\n    }\n  }]);\n\n  return ComplexArray;\n}(_complex_array2.default);\n\nfunction ensureComplexArray(input) {\n  return input instanceof ComplexArray && input || new ComplexArray(input);\n}\n\nfunction fft(input, inverse) {\n  var n = input.length;\n\n  if (n & n - 1) {\n    return FFT_Recursive(input, inverse);\n  } else {\n    return FFT_2_Iterative(input, inverse);\n  }\n}\n\nfunction FFT_Recursive(input, inverse) {\n  var n = input.length;\n\n  if (n === 1) {\n    return input;\n  }\n\n  var output = new ComplexArray(n, input.ArrayType);\n\n  // Use the lowest odd factor, so we are able to use FFT_2_Iterative in the\n  // recursive transforms optimally.\n  var p = LowestOddFactor(n);\n  var m = n / p;\n  var normalisation = 1 / Math.sqrt(p);\n  var recursive_result = new ComplexArray(m, input.ArrayType);\n\n  // Loops go like O(n Σ p_i), where p_i are the prime factors of n.\n  // for a power of a prime, p, this reduces to O(n p log_p n)\n  for (var j = 0; j < p; j++) {\n    for (var i = 0; i < m; i++) {\n      recursive_result.real[i] = input.real[i * p + j];\n      recursive_result.imag[i] = input.imag[i * p + j];\n    }\n    // Don't go deeper unless necessary to save allocs.\n    if (m > 1) {\n      recursive_result = fft(recursive_result, inverse);\n    }\n\n    var del_f_r = Math.cos(2 * PI * j / n);\n    var del_f_i = (inverse ? -1 : 1) * Math.sin(2 * PI * j / n);\n    var f_r = 1;\n    var f_i = 0;\n\n    for (var _i = 0; _i < n; _i++) {\n      var _real = recursive_result.real[_i % m];\n      var _imag = recursive_result.imag[_i % m];\n\n      output.real[_i] += f_r * _real - f_i * _imag;\n      output.imag[_i] += f_r * _imag + f_i * _real;\n\n      var _ref = [f_r * del_f_r - f_i * del_f_i, f_i = f_r * del_f_i + f_i * del_f_r];\n      f_r = _ref[0];\n      f_i = _ref[1];\n    }\n  }\n\n  // Copy back to input to match FFT_2_Iterative in-placeness\n  // TODO: faster way of making this in-place?\n  for (var _i2 = 0; _i2 < n; _i2++) {\n    input.real[_i2] = normalisation * output.real[_i2];\n    input.imag[_i2] = normalisation * output.imag[_i2];\n  }\n\n  return input;\n}\n\nfunction FFT_2_Iterative(input, inverse) {\n  var n = input.length;\n\n  var output = BitReverseComplexArray(input);\n  var output_r = output.real;\n  var output_i = output.imag;\n  // Loops go like O(n log n):\n  //   width ~ log n; i,j ~ n\n  var width = 1;\n  while (width < n) {\n    var del_f_r = Math.cos(PI / width);\n    var del_f_i = (inverse ? -1 : 1) * Math.sin(PI / width);\n    for (var i = 0; i < n / (2 * width); i++) {\n      var f_r = 1;\n      var f_i = 0;\n      for (var j = 0; j < width; j++) {\n        var l_index = 2 * i * width + j;\n        var r_index = l_index + width;\n\n        var left_r = output_r[l_index];\n        var left_i = output_i[l_index];\n        var right_r = f_r * output_r[r_index] - f_i * output_i[r_index];\n        var right_i = f_i * output_r[r_index] + f_r * output_i[r_index];\n\n        output_r[l_index] = SQRT1_2 * (left_r + right_r);\n        output_i[l_index] = SQRT1_2 * (left_i + right_i);\n        output_r[r_index] = SQRT1_2 * (left_r - right_r);\n        output_i[r_index] = SQRT1_2 * (left_i - right_i);\n\n        var _ref2 = [f_r * del_f_r - f_i * del_f_i, f_r * del_f_i + f_i * del_f_r];\n        f_r = _ref2[0];\n        f_i = _ref2[1];\n      }\n    }\n    width <<= 1;\n  }\n\n  return output;\n}\n\nfunction BitReverseIndex(index, n) {\n  var bitreversed_index = 0;\n\n  while (n > 1) {\n    bitreversed_index <<= 1;\n    bitreversed_index += index & 1;\n    index >>= 1;\n    n >>= 1;\n  }\n  return bitreversed_index;\n}\n\nfunction BitReverseComplexArray(array) {\n  var n = array.length;\n  var flips = new Set();\n\n  for (var i = 0; i < n; i++) {\n    var r_i = BitReverseIndex(i, n);\n\n    if (flips.has(i)) continue;\n\n    var _ref3 = [array.real[r_i], array.real[i]];\n    array.real[i] = _ref3[0];\n    array.real[r_i] = _ref3[1];\n    var _ref4 = [array.imag[r_i], array.imag[i]];\n    array.imag[i] = _ref4[0];\n    array.imag[r_i] = _ref4[1];\n\n\n    flips.add(r_i);\n  }\n\n  return array;\n}\n\nfunction LowestOddFactor(n) {\n  var sqrt_n = Math.sqrt(n);\n  var factor = 3;\n\n  while (factor <= sqrt_n) {\n    if (n % factor === 0) return factor;\n    factor += 2;\n  }\n  return n;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ComplexArray = function () {\n  function ComplexArray(other) {\n    var arrayType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Float32Array;\n\n    _classCallCheck(this, ComplexArray);\n\n    if (other instanceof ComplexArray) {\n      // Copy constuctor.\n      this.ArrayType = other.ArrayType;\n      this.real = new this.ArrayType(other.real);\n      this.imag = new this.ArrayType(other.imag);\n    } else {\n      this.ArrayType = arrayType;\n      // other can be either an array or a number.\n      this.real = new this.ArrayType(other);\n      this.imag = new this.ArrayType(this.real.length);\n    }\n\n    this.length = this.real.length;\n  }\n\n  _createClass(ComplexArray, [{\n    key: 'toString',\n    value: function toString() {\n      var components = [];\n\n      this.forEach(function (value, i) {\n        components.push('(' + value.real.toFixed(2) + ', ' + value.imag.toFixed(2) + ')');\n      });\n\n      return '[' + components.join(', ') + ']';\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(iterator) {\n      var n = this.length;\n      // For gc efficiency, re-use a single object in the iterator.\n      var value = Object.seal(Object.defineProperties({}, {\n        real: { writable: true }, imag: { writable: true }\n      }));\n\n      for (var i = 0; i < n; i++) {\n        value.real = this.real[i];\n        value.imag = this.imag[i];\n        iterator(value, i, n);\n      }\n    }\n\n    // In-place mapper.\n\n  }, {\n    key: 'map',\n    value: function map(mapper) {\n      var _this = this;\n\n      this.forEach(function (value, i, n) {\n        mapper(value, i, n);\n        _this.real[i] = value.real;\n        _this.imag[i] = value.imag;\n      });\n\n      return this;\n    }\n  }, {\n    key: 'conjugate',\n    value: function conjugate() {\n      return new ComplexArray(this).map(function (value) {\n        value.imag *= -1;\n      });\n    }\n  }, {\n    key: 'magnitude',\n    value: function magnitude() {\n      var mags = new this.ArrayType(this.length);\n\n      this.forEach(function (value, i) {\n        mags[i] = Math.sqrt(value.real * value.real + value.imag * value.imag);\n      });\n\n      return mags;\n    }\n  }]);\n\n  return ComplexArray;\n}();\n\nexports.default = ComplexArray;","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}